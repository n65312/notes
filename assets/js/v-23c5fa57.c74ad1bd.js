"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[1248],{2500:(e,a,d)=>{d.r(a),d.d(a,{data:()=>t});const t={key:"v-23c5fa57",path:"/note/js/10.Supplementary.html",title:"11. 补充知识",lang:"zh-CN",frontmatter:{title:"11. 补充知识",date:"2017-06-14T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"模板字符串",slug:"模板字符串",children:[]},{level:2,title:"类型转换不会影响原本的数据",slug:"类型转换不会影响原本的数据",children:[]},{level:2,title:"复合的赋值运算符",slug:"复合的赋值运算符",children:[]},{level:2,title:"void 运算符",slug:"void-运算符",children:[]},{level:2,title:"typeof 运算符",slug:"typeof-运算符",children:[]},{level:2,title:"逗号运算符",slug:"逗号运算符",children:[]}],filePathRelative:"note/js/10.Supplementary.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},9962:(e,a,d)=>{d.r(a),d.d(a,{default:()=>i});const t=(0,d(6252).uE)('<h1 id="补充知识" tabindex="-1"><a class="header-anchor" href="#补充知识" aria-hidden="true">#</a> 补充知识</h1><h2 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a> 模板字符串</h2><blockquote><p>写法：`` 反引号表示：模板字符串</p></blockquote><h2 id="类型转换不会影响原本的数据" tabindex="-1"><a class="header-anchor" href="#类型转换不会影响原本的数据" aria-hidden="true">#</a> 类型转换不会影响原本的数据</h2><h2 id="复合的赋值运算符" tabindex="-1"><a class="header-anchor" href="#复合的赋值运算符" aria-hidden="true">#</a> 复合的赋值运算符</h2><p><code>+=</code> <code>-=</code> <code>/=</code> <code>*=</code> <code>%=</code> <code>**=</code></p><h2 id="void-运算符" tabindex="-1"><a class="header-anchor" href="#void-运算符" aria-hidden="true">#</a> void 运算符</h2><p>void 运算符是一元运算符</p><div class="custom-container tip"><p class="custom-container-title">写法:</p><ol><li><p>普通写法: <code>void表达式</code></p></li><li><p>函数写法: <code>void(表达式)</code></p></li></ol></div><p>运行表达式，然后返回 <code>undefined</code></p><h2 id="typeof-运算符" tabindex="-1"><a class="header-anchor" href="#typeof-运算符" aria-hidden="true">#</a> typeof 运算符</h2><p>typeof 运算符是一元运算符</p><div class="custom-container tip"><p class="custom-container-title">写法:</p><ol><li><p>普通写法: <code>typeof 表达式</code></p></li><li><p>函数写法: <code>typeof(表达式)</code></p></li></ol></div><p>typeof 运算，返回表达式类型，是一个字符串。</p><h2 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符" aria-hidden="true">#</a> 逗号运算符</h2><blockquote><p>写法：表达式 1,表达式 2</p></blockquote><p>依次运行两个表达式，返回表达式 2</p><p>逗号运算符的优先级比赋值运算符(&#39;=&#39;)更低</p>',18),i={render:function(e,a){return t}}}}]);