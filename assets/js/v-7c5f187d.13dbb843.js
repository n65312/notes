"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[1681],{9325:(a,e,n)=>{n.r(e),n.d(e,{data:()=>s});const s={key:"v-7c5f187d",path:"/note/js/12.Bit-operation.html",title:"13. 位运算",lang:"zh-CN",frontmatter:{title:"13. 位运算",date:"2017-06-14T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"与运算",slug:"与运算",children:[]},{level:2,title:"或运算",slug:"或运算",children:[]},{level:2,title:"否（非）运算",slug:"否-非-运算",children:[]},{level:2,title:"异或运算",slug:"异或运算",children:[]},{level:2,title:"应用场景",slug:"应用场景",children:[]},{level:2,title:"位移运算",slug:"位移运算",children:[]}],filePathRelative:"note/js/12.Bit-operation.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},8626:(a,e,n)=>{n.r(e),n.d(e,{default:()=>p});const s=(0,n(6252).uE)('<h1 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h1><p>将一个整数的二进制格式进行运算</p><p>JS中，如果对一个数据进行位运算，它首先会将其转换为一个整数，并且按照32位的整数二进制排列</p><p>举例</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">2.3</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0010</span> \n\n<span class="token number">NaN</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>\n\n<span class="token number">Infinity</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>\n\n<span class="token operator">-</span><span class="token number">Infinity</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="与运算" tabindex="-1"><a class="header-anchor" href="#与运算" aria-hidden="true">#</a> 与运算</h2><p>符号：<code>&amp;</code></p><p>写法：整数1 &amp; 整数2</p><p>将两个整数每一位进行比较，如果都为1，结果为1，否则为0。</p><h2 id="或运算" tabindex="-1"><a class="header-anchor" href="#或运算" aria-hidden="true">#</a> 或运算</h2><p>符号：<code>|</code></p><p>写法：整数1 | 整数2</p><p>将两个整数每一位进行比较，如果都为0，结果为0，否则为1。</p><h2 id="否-非-运算" tabindex="-1"><a class="header-anchor" href="#否-非-运算" aria-hidden="true">#</a> 否（非）运算</h2><p>符号：<code>~</code></p><p>写法：~整数</p><p>将该整数按位取反</p><p><strong>负数的存储方式</strong></p><p>-1</p><p>真码：1000 0000 0000 0000 0000 0000 0000 0001 反码：1111 1111 1111 1111 1111 1111 1111 1110 真码取反 补码：1111 1111 1111 1111 1111 1111 1111 1111 反码加1</p><p>取反的快速运算：在要取反的数字前加符号，再减1。 -取反数字 -1</p><p>JS中最快速的取整方式：<code>~~整数 </code></p><h2 id="异或运算" tabindex="-1"><a class="header-anchor" href="#异或运算" aria-hidden="true">#</a> 异或运算</h2><p>符号：<code>^</code></p><p>写法：数字1 ^ 数字2</p><p>将数字1 和 数字2 按位比较，相同取0，不同取1.</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><p>位的叠加（开关）</p><h2 id="位移运算" tabindex="-1"><a class="header-anchor" href="#位移运算" aria-hidden="true">#</a> 位移运算</h2><p>左位移：<code>&lt;&lt;</code></p><p>写法：数字1 &lt;&lt; 数字2 结果：数字1 * 2^数字2 ,数字1 乘以 2的数字2 次方</p><p>将数字1的二进制（除符号外，左移动数字2的次数）</p><p>右位移：<code>&gt;&gt;</code></p><p>写法：数字1 &gt;&gt; 数字2 结果：数字1 / 2^数字2 ,数字1 除以 2的数字2 次方，后取整</p><p>将数字1的二进制（除符号外，右移动数字2的次数）</p><p>全右位移：<code>&gt;&gt;&gt;</code></p><p>与右位移的区别，全右位移会导致符号位跟着位移。</p>',37),p={render:function(a,e){return s}}}}]);