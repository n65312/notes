"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[3872],{7027:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-bea71fba",path:"/note/js/54.Pipeline-Function.html",title:"55. 函数管道",lang:"zh-CN",frontmatter:{title:"55. 函数管道",date:"2017-06-30T00:00:00.000Z",tags:["JS进阶"]},excerpt:"",headers:[{level:2,title:"定义",slug:"定义",children:[]},{level:2,title:"使用",slug:"使用",children:[]}],filePathRelative:"note/js/54.Pipeline-Function.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},7974:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="函数管道" tabindex="-1"><a class="header-anchor" href="#函数管道" aria-hidden="true">#</a> 函数管道</h1><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>函数管道：将多个单参函数组合起来，形成一个新的函数，这些函数中，前一个函数的输出，是后一个函数的输入。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>定义多个函数，利于模块化。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 将字符串中，每个单词的首字母大写</span>\n<span class="token keyword">function</span> <span class="token function">everyFirstLetterUp</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b(\\w)(\\w*)\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span> $<span class="token number">1</span><span class="token punctuation">,</span> $<span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// console.log($,$1,$2);</span>\n    <span class="token keyword">return</span> $<span class="token number">1.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> $<span class="token number">2</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 将字符串中，除首字母外的其他字母小写</span>\n<span class="token keyword">function</span> <span class="token function">otherLetterLower</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b(\\w)(\\w*)\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span> $<span class="token number">1</span><span class="token punctuation">,</span> $<span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> $<span class="token number">1</span> <span class="token operator">+</span> $<span class="token number">2.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 将字符串中，所有的空白字符去掉</span>\n<span class="token keyword">function</span> <span class="token function">removeEmpty</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 将字符串中，每个单词的首字母小写</span>\n<span class="token keyword">function</span> <span class="token function">firstLetterLower</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> $<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 截取字符串</span>\n<span class="token keyword">function</span> <span class="token function">curString</span><span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span> str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用上面的函数将字符串，变为小驼峰命名</span>\n\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;   MY    fIrST   naME IS  TOM   &#39;</span>\n\nstr <span class="token operator">=</span> <span class="token function">everyFirstLetterUp</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\nstr <span class="token operator">=</span> <span class="token function">firstLetterLower</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\nstr <span class="token operator">=</span> <span class="token function">otherLetterLower</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\nstr <span class="token operator">=</span> <span class="token function">removeEmpty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// myFirstNameIsTom</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>函数管道</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 函数管道\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> 字符串\n */</span>\n<span class="token keyword">function</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用 数组的 reduce 方法</span>\n    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n\n    <span class="token comment">// 使用 for循环 的写法</span>\n    <span class="token comment">// for (var i = 0; i &lt; args.length; i++) {</span>\n    <span class="token comment">//   var func = args[i];</span>\n    <span class="token comment">//   val = func(val);</span>\n    <span class="token comment">// }</span>\n    <span class="token comment">// return val;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 需要用到上面的函数，以及科里化函数</span>\n<span class="token keyword">var</span> smallCamel <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>\n  everyFirstLetterUp<span class="token punctuation">,</span>\n  firstLetterLower<span class="token punctuation">,</span>\n  otherLetterLower<span class="token punctuation">,</span>\n  removeEmpty<span class="token punctuation">,</span>\n  <span class="token function">curry</span><span class="token punctuation">(</span>curString<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 利用科里化函数，固定一个参数，因为函数管道只能是单参函数组合。</span>\n<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">smallCamel</span><span class="token punctuation">(</span><span class="token string">&#39;   MY    fIrST   naME   &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// myFirstNam</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">smallCamel</span><span class="token punctuation">(</span><span class="token string">&#39;you  Are  bEAUTIFUL&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// youAreBeau</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',8),e={render:function(n,s){return p}}}}]);