"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[8260],{2735:(e,l,d)=>{d.r(l),d.d(l,{data:()=>i});const i={key:"v-2fe0139e",path:"/note/js/34.DOM2.html",title:"35. DOM 元素操作",lang:"zh-CN",frontmatter:{title:"35. DOM 元素操作",date:"2017-06-21T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"初识元素事件",slug:"初识元素事件",children:[]},{level:2,title:"获取和设置元素属性",slug:"获取和设置元素属性",children:[{level:3,title:"可识别属性",slug:"可识别属性",children:[]},{level:3,title:"自定义属性",slug:"自定义属性",children:[]}]},{level:2,title:"获取和设置元素内容",slug:"获取和设置元素内容",children:[]},{level:2,title:"元素结构重构",slug:"元素结构重构",children:[]},{level:2,title:"创建和删除元素",slug:"创建和删除元素",children:[{level:3,title:"创建元素",slug:"创建元素",children:[]},{level:3,title:"克隆元素",slug:"克隆元素",children:[]},{level:3,title:"删除元素",slug:"删除元素",children:[]}]}],filePathRelative:"note/js/34.DOM2.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},7065:(e,l,d)=>{d.r(l),d.d(l,{default:()=>a});const i=(0,d(6252).uE)('<h1 id="dom-元素操作" tabindex="-1"><a class="header-anchor" href="#dom-元素操作" aria-hidden="true">#</a> DOM 元素操作</h1><h2 id="初识元素事件" tabindex="-1"><a class="header-anchor" href="#初识元素事件" aria-hidden="true">#</a> 初识元素事件</h2><p>元素事件：某个元素发生一件事（被点击 click）。</p><p>事件处理程序：是一个函数，发生了一件事，应该做什么事情。</p><p>注册事件：将事件处理程序与某个事件关联。</p><p><strong>this关键字在处理程序中指代当前发生的事件</strong></p><h2 id="获取和设置元素属性" tabindex="-1"><a class="header-anchor" href="#获取和设置元素属性" aria-hidden="true">#</a> 获取和设置元素属性</h2><p>通用方式：</p><ul><li><code>getAttribute</code>，<code>setAttribute</code></li></ul><h3 id="可识别属性" tabindex="-1"><a class="header-anchor" href="#可识别属性" aria-hidden="true">#</a> 可识别属性</h3><p>正常的 HTML 属性</p><ul><li><code>DOM对象.属性名</code>：推荐</li></ul><p>注意：</p><ol><li>正常的属性即使没有赋值，也有默认值。</li><li>布尔属性在 DOM 对象中，得到的是 boolean</li><li>某些表单元素可以获取到不存在的属性</li><li>某些属性与标志符冲突，此时，需要更换属性名</li></ol><h3 id="自定义属性" tabindex="-1"><a class="header-anchor" href="#自定义属性" aria-hidden="true">#</a> 自定义属性</h3><p>HTML5 建议自定义属性使用<code>data-</code>作为前缀</p><p>如果遵从 HTML5 自定义属性规范，可以使用<code>DOM对象.dataset.属性名</code>控制属性</p><p>删除自定义属性</p><ul><li><code>removeAttribute(&#39;属性名&#39;)</code></li><li><code>delete DOM.dataset.属性名</code></li></ul><h2 id="获取和设置元素内容" tabindex="-1"><a class="header-anchor" href="#获取和设置元素内容" aria-hidden="true">#</a> 获取和设置元素内容</h2><ul><li><code>innerHTML</code>：获取和设置元素内部的 HTML 文本</li><li><code>innerText</code>：获取和设置元素内部的纯文本，仅得到元素内部显示出来的文本</li><li><code>textContent</code>：获取和设置元素内部的纯文本，得到的是内部源代码中的文本</li></ul><h2 id="元素结构重构" tabindex="-1"><a class="header-anchor" href="#元素结构重构" aria-hidden="true">#</a> 元素结构重构</h2><ul><li><code>父元素.appenChild(元素)</code>：在父元素末尾追加一个子元素。</li><li><code>父元素.insertBefore(待插入的元素,哪个元素之前)</code>：在父元素的指定元素之前插入一个元素</li><li><code>父元素.replaceChild(替换节点，选定节点)</code>：对选定的节点，替换一个子节点 Node 为另外一个节点。</li></ul><p>细节：</p><p>更改元素结构效率较低，尽量少用。</p><h2 id="创建和删除元素" tabindex="-1"><a class="header-anchor" href="#创建和删除元素" aria-hidden="true">#</a> 创建和删除元素</h2><h3 id="创建元素" tabindex="-1"><a class="header-anchor" href="#创建元素" aria-hidden="true">#</a> 创建元素</h3><ul><li><code>document.createElement(&#39;元素名&#39;)</code>：创建一个元素对象 <ul><li><code>document.createTextNode(&#39;文本&#39;)</code></li><li><code>document.createDocumentFragment()</code>：创建文档片段</li></ul></li></ul><h3 id="克隆元素" tabindex="-1"><a class="header-anchor" href="#克隆元素" aria-hidden="true">#</a> 克隆元素</h3><ul><li><code>DOM对象.cloneNode(是否深度克隆)</code>：复制一个新的 DOM 对象并返回</li></ul><blockquote><p><code>childNodes</code>也是实时集合</p></blockquote><h3 id="删除元素" tabindex="-1"><a class="header-anchor" href="#删除元素" aria-hidden="true">#</a> 删除元素</h3><ul><li><code>父元素.removeChild(子元素)</code>：父元素调用，传入子元素，返回删除的子元素</li><li><code>remove()</code>：删除自己</li></ul>',33),a={render:function(e,l){return i}}}}]);