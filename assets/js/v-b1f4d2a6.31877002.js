"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[1932],{1403:(e,l,i)=>{i.r(l),i.d(l,{data:()=>d});const d={key:"v-b1f4d2a6",path:"/note/js/27.Wrapper.html",title:"28. 原始类型包装器",lang:"zh-CN",frontmatter:{title:"28. 原始类型包装器",date:"2017-06-16T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"Number",slug:"number",children:[{level:3,title:"静态成员",slug:"静态成员",children:[]},{level:3,title:"实例成员",slug:"实例成员",children:[]}]},{level:2,title:"Boolean",slug:"boolean",children:[]},{level:2,title:"String",slug:"string",children:[{level:3,title:"静态成员",slug:"静态成员-1",children:[]},{level:3,title:"实例成员",slug:"实例成员-1",children:[]}]}],filePathRelative:"note/js/27.Wrapper.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},7957:(e,l,i)=>{i.r(l),i.d(l,{default:()=>f});var d=i(6252);const p=(0,d._)("h1",{id:"原始类型包装器",tabindex:"-1"},[(0,d._)("a",{class:"header-anchor",href:"#原始类型包装器","aria-hidden":"true"},"#"),(0,d.Uk)(" 原始类型包装器")],-1),o=(0,d._)("ul",null,[(0,d._)("li",null,"new 包装器(值)：返回一个对象。"),(0,d._)("li",null,"包装器(值)：返回一个原始类型。")],-1),r=(0,d._)("h2",{id:"number",tabindex:"-1"},[(0,d._)("a",{class:"header-anchor",href:"#number","aria-hidden":"true"},"#"),(0,d.Uk)(" Number")],-1),t={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"},a=(0,d.Uk)("MDN"),n=(0,d.uE)('<h3 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员" aria-hidden="true">#</a> 静态成员</h3><ul><li><p><code>isNaN() </code></p><p>确定传递的值是否是 NaN。</p></li><li><p><code>isFinite() </code></p><p>确定传递的值类型及本身是否是有限数。</p></li><li><p><code>isInteger() </code></p><p>确定传递的值类型是“number”，且是整数。</p></li><li><p><code>parseFloat() </code></p><p>将一个数据转换为小数。</p></li><li><p><code>parseInt() </code></p><p>将一个数据转换为整数，直接舍去小数部分。</p></li></ul><p>parseFloat、parseInt 要求参数是一个字符串，如果不是字符串，则会先转换为字符串。 从字符串开始位置（从左到右）进行查找，找到第一个有效的数字进行转换，左右空白字符忽略，如果没有找到，则返回 NaN</p><p><code>parseInt()</code> 可以传递第二个参数，表示将给定的字符串，识别为多少进制</p><h3 id="实例成员" tabindex="-1"><a class="header-anchor" href="#实例成员" aria-hidden="true">#</a> 实例成员</h3><ul><li><p><code>toFixed() </code></p><p>指定保留小数的位数，会四舍五入。</p></li><li><p><code>toPrecision()</code></p><p>以指定的精度,返回一个字符串。</p></li></ul><h2 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h2>',7),c={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean",target:"_blank",rel:"noopener noreferrer"},s=(0,d.Uk)("MDN"),h=(0,d.uE)('<p><strong>Boolean</strong> 对象是一个布尔值的对象包装器。</p><p>如果需要，作为第一个参数传递的值将转换为布尔值。</p><p>如果省略或值 <code>0</code>，<code>-0</code>，<code>null</code>，<code>false</code>，<code>NaN</code>，<code>undefined</code>，<code>&quot;&quot;</code>，该对象具有的初始值 false。</p><p>所有其他值，包括任何对象，空数组<code>[]</code>或字符串<code>&quot;false&quot;</code>，都会创建一个初始值为的对象 true。</p><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2>',5),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},b=(0,d.Uk)("MDN"),g=(0,d.uE)('<h3 id="静态成员-1" tabindex="-1"><a class="header-anchor" href="#静态成员-1" aria-hidden="true">#</a> 静态成员</h3><ul><li><code>fromCharCode()</code> 通过一串 Unicode 创建字符串。</li></ul><h3 id="实例成员-1" tabindex="-1"><a class="header-anchor" href="#实例成员-1" aria-hidden="true">#</a> 实例成员</h3><ul><li><code>length</code> 属性，返回字符串的长度。</li></ul><p>字符串是一个伪数组。</p><ul><li><p><code>charAt()</code></p><p>返回给定 index（下标）处的字符；如果指定的 index 值超出了该范围，则返回一个空字符串。</p></li><li><p><code>charCodeAt()</code></p><p>返回给定 index（下标）的字符的 Unicode 的值；如果 index 超出范围，charCodeAt() 返回 NaN。</p></li><li><p><code>concat()</code></p><p>将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</p></li><li><p><code>includes()</code></p><p>判断一个字符串里是否包含其他字符串。</p></li><li><p><code>startWith()</code></p><p>判断字符串的起始位置是否匹配其他字符串中的字符。</p></li><li><p><code>endsWith()</code></p><p>判断一个字符串的是否以给定字符串结尾，结果返回布尔值。</p></li><li><p><code>indexOf()</code></p><p>从字符串对象中返回首个被发现的给定值的索引值，如果没有找到则返回-1。</p></li><li><p><code>lastInsexOf()</code></p><p>从字符串对象中返回最后一个被发现的给定值的索引值，如果没有找到则返回-1。</p></li><li><p><code>padStart()</code></p><p>在当前字符串头部填充指定的字符串， 直到达到指定的长度。 返回一个新的字符串。</p><blockquote><p>语法：<strong>str.padStart(targetLength [, padString])</strong></p></blockquote><p><strong>参数：</strong></p><p>targetLength</p><p>当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</p><p>padString 可选</p><p>填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 &quot; &quot;（U+0020）。</p></li><li><p><code>padEnd()</code></p><p>在当前字符串尾部填充指定的字符串， 直到达到指定的长度。 返回一个新的字符串。</p></li><li><p><code>repeat()</code></p><p>返回指定重复次数的字符串</p></li><li><p><code>slice(a,b)</code></p><p>摘取一个字符串区域，返回一个新的字符串。 从 a 位置，取到 b 位置（取不到 b）；a b 位置可以是负数</p></li><li><p><code>substr(a,b)</code></p><p>通过指定字符数返回在指定位置开始的字符串中的字符。 从 a 位置，取指定的长度 b 个字符；a b 位置可以是负数</p></li><li><p><code>substring()</code></p><p>返回在字符串中指定两个下标之间的字符。参数不可是负数；参数可以调换</p><blockquote><p>语法：<strong>str.substring(indexStart[, indexEnd])</strong></p></blockquote><p>substring 提取从 indexStart 到 indexEnd（不包括）之间的字符。</p><ul><li>如果 indexStart 等于 indexEnd，substring 返回一个空字符串。</li><li>如果省略 indexEnd，substring 提取字符一直到字符串末尾。</li><li>如果任一参数小于 0 或为 NaN，则被当作 0。</li><li>如果任一参数大于 stringName.length，则被当作 stringName.length。</li><li>如果 indexStart 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。</li></ul></li><li><p><code>toLowerCase()</code></p><p>将字符串转换成小写并返回。</p></li><li><p><code>toUpperCase()</code></p><p>将字符串转换成大写并返回。</p></li><li><p><code>trim()</code></p><p>从字符串的开始和结尾去除空格。</p></li><li><p><code>trimStart()</code> 等同于 <code>trimLeft()</code></p><p>从字符串的左侧去除空格。</p></li><li><p><code>trimEnd()</code> 等同于 <code>trimRight()</code></p><p>从字符串的右侧去除空格。</p></li><li><p><code>split()</code></p><p>使用指定的分隔符字符串将一个 String 对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。</p></li></ul>',6),f={render:function(e,l){const i=(0,d.up)("OutboundLink");return(0,d.wg)(),(0,d.iD)(d.HY,null,[p,o,r,(0,d._)("p",null,[(0,d._)("a",t,[a,(0,d.Wm)(i)])]),n,(0,d._)("p",null,[(0,d._)("a",c,[s,(0,d.Wm)(i)])]),h,(0,d._)("p",null,[(0,d._)("a",u,[b,(0,d.Wm)(i)])]),g],64)}}}}]);