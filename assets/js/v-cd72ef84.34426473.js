"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[4685],{6931:(e,l,i)=>{i.r(l),i.d(l,{data:()=>p});const p={key:"v-cd72ef84",path:"/note/js/33.DOM1.html",title:"34. 获取 DOM 节点",lang:"zh-CN",frontmatter:{title:"34. 获取 DOM 节点",date:"2017-06-21T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"旧的获取元素节点的方式",slug:"旧的获取元素节点的方式",children:[]},{level:2,title:"新的获取元素节点的方式",slug:"新的获取元素节点的方式",children:[{level:3,title:"1.通过方法获取",slug:"_1-通过方法获取",children:[]},{level:3,title:"2.根据节点关系获取节点",slug:"_2-根据节点关系获取节点",children:[]},{level:3,title:"获取元素节点",slug:"获取元素节点",children:[]}]},{level:2,title:"获取节点信息",slug:"获取节点信息",children:[]}],filePathRelative:"note/js/33.DOM1.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},7643:(e,l,i)=>{i.r(l),i.d(l,{default:()=>d});const p=(0,i(6252).uE)('<h1 id="获取-dom-节点" tabindex="-1"><a class="header-anchor" href="#获取-dom-节点" aria-hidden="true">#</a> 获取 DOM 节点</h1><p>获取 DOM 对象</p><h2 id="旧的获取元素节点的方式" tabindex="-1"><a class="header-anchor" href="#旧的获取元素节点的方式" aria-hidden="true">#</a> 旧的获取元素节点的方式</h2><p><strong>DOM0</strong></p><ul><li><p>document.body：</p><p>获取 body 元素节点</p></li><li><p>document.head：</p><p>获取 head 元素节点</p></li><li><p>document.links：</p><p>获取页面上所有的超链接(<code>&lt;a&gt;&lt;/a&gt;</code>)元素节点，类数组</p></li><li><p>document.anchors：</p><p>获取页面上所有的锚链接(具有 name 属性)元素节点</p></li><li><p>document.forms：</p><p>获取页面上所有 form 元素节点</p></li></ul><h2 id="新的获取元素节点的方式" tabindex="-1"><a class="header-anchor" href="#新的获取元素节点的方式" aria-hidden="true">#</a> 新的获取元素节点的方式</h2><h3 id="_1-通过方法获取" tabindex="-1"><a class="header-anchor" href="#_1-通过方法获取" aria-hidden="true">#</a> 1.通过方法获取</h3><ul><li><p><code>document.getElementById(&#39;id 名&#39;)</code></p><p>通过 id 获取对应的元素</p></li><li><p><code>document.getElementsByTagName(&#39;元素(标签)名&#39;)</code></p><p>通过元素名获取元素，得到类数组</p></li><li><p><code>document.getElementsByClassName(&#39;类名&#39;)</code></p><p>通过元素的类名获取元素，得到类数组，IE9 以下无效</p></li><li><p><code>document.getElementsByName(&#39;name 属性值&#39;)</code></p><p>通过元素的 name 属性值获取元素，得到类数组</p></li><li><p><code>document.querySelector(&#39;css 选择器&#39;)</code></p><p>通过 css 选择器获取元素，得到匹配的第一个，IE8 以下无效</p></li><li><p><code>document.querySelectorAll(&#39;css 选择器&#39;)</code></p><p>通过 css 选择器获取元素，得到所有匹配的结果，类数组，IE8 以下无效</p></li><li><p><code>document.documentElement</code></p><p>获取根元素(html 元素)</p></li></ul><p>细节：</p><ol><li>在所有得到类数组的方法中，除了 <code>querySelectorAll</code>，其他的方法都是实时更新的。</li><li><code>getElementById</code> 得到元素执行效率最高。</li><li>书写了 id 的元素，会自动成为 window 对象的属性。它是一个实时的单对象。事实上的标准。不推荐使用。</li><li><code>getElementsByTagName</code>、<code>getElementsByClassName</code>、<code>querySelector</code>、<code>querySelectorAll</code>，可以作为其他元素节点对象的方法使用。</li></ol><h3 id="_2-根据节点关系获取节点" tabindex="-1"><a class="header-anchor" href="#_2-根据节点关系获取节点" aria-hidden="true">#</a> 2.根据节点关系获取节点</h3><ul><li><p>parentNode：</p><p>获取父节点（元素、文档）</p></li><li><p>previousSibling：</p><p>获取上一个兄弟节点</p></li><li><p>nextSibling：</p><p>获取下一个兄弟节点</p></li><li><p>childNodes：</p><p>获取所有的子节点</p></li><li><p>firstChild：</p><p>获取第一个子节点</p></li><li><p>lastChild：</p><p>获取最后一个子节点</p></li><li><p>attributes：</p><p>获取元素的属性节点</p></li></ul><h3 id="获取元素节点" tabindex="-1"><a class="header-anchor" href="#获取元素节点" aria-hidden="true">#</a> 获取元素节点</h3><ul><li><p>parentElement：</p><p>获取父元素</p></li><li><p>previousElementSibling：</p><p>获取上一个兄弟元素</p></li><li><p>nextElementSibling：</p><p>获取下一个兄弟元素</p></li><li><p>children：</p><p>获取子元素</p></li><li><p>firstElementChild：</p><p>获取第一个子元素</p></li><li><p>lastElementChild：</p><p>获取最后一个子元素</p></li></ul><h2 id="获取节点信息" tabindex="-1"><a class="header-anchor" href="#获取节点信息" aria-hidden="true">#</a> 获取节点信息</h2><ul><li><p>nodeName：</p><p>获取节点名称</p></li><li><p>nodeValue：</p><p>获取节点的值</p></li><li><p>nodeType：</p><p>节点类型，是一个数字。</p></li></ul>',16),d={render:function(e,l){return p}}}}]);