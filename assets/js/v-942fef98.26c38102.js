"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[9792],{6534:(e,o,d)=>{d.r(o),d.d(o,{data:()=>t});const t={key:"v-942fef98",path:"/note/js/41.Other-events.html",title:"42. 其他事件",lang:"zh-CN",frontmatter:{title:"42. 其他事件",date:"2017-06-23T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"表单事件",slug:"表单事件",children:[]},{level:2,title:"其他事件",slug:"其他事件-1",children:[]}],filePathRelative:"note/js/41.Other-events.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},2953:(e,o,d)=>{d.r(o),d.d(o,{default:()=>D});var t=d(6252);const n=(0,t.uE)('<h1 id="其他事件" tabindex="-1"><a class="header-anchor" href="#其他事件" aria-hidden="true">#</a> 其他事件</h1><h2 id="表单事件" tabindex="-1"><a class="header-anchor" href="#表单事件" aria-hidden="true">#</a> 表单事件</h2><ul><li><p><code>focus</code></p><p>元素聚焦时触发（能与用户发生交互的元素，都可以聚焦），该事件不会冒泡。</p></li><li><p><code>blur</code></p><p>元素失去焦点时触发,该事件不会冒泡。</p></li><li><p><code>submit</code></p><p>提交表单事件，仅在<code>form</code>元素有效。</p></li><li><p><code>change</code></p><p>文本改变事件</p></li><li><p><code>input</code></p><p>文本改变事件，即时触发。</p></li></ul><h2 id="其他事件-1" tabindex="-1"><a class="header-anchor" href="#其他事件-1" aria-hidden="true">#</a> 其他事件</h2><blockquote><p>浏览器渲染页面的过程：</p><ol><li>得到页面的源代码</li><li>创建document节点</li><li>从上到下，将元素依次添加到dom树中，每添加一个元素，进行预渲染</li><li>按照结构，依次渲染子节点</li></ol></blockquote>',5),c=(0,t.uE)('<li><p><code>load</code></p><p><code>window的load</code>事件：页面中所有资源全部加载完毕的事件</p><p><code>图片的load</code>事件：图片资源加载完毕的事件</p></li><li><p><code>DOMContentLoaded</code></p><p><code>document的DOMContentLoaded</code>：dom树构建完成后发生</p><p><code>DOMContentLoaded</code>必须使用DOM2级事件注册，即</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 执行代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li>',2),l=(0,t._)("p",null,[(0,t._)("code",null,"readystatechange")],-1),a=(0,t.Uk)("当文档的 "),p={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readyState",target:"_blank",rel:"noopener noreferrer"},i=(0,t._)("code",null,"readyState",-1),s=(0,t.Uk)(" 属性发生改变时，会触发 "),r=(0,t._)("code",null,"readystatechange",-1),u=(0,t.Uk)(" 事件。"),h=(0,t._)("strong",null,[(0,t._)("code",null,"Document.readyState")],-1),m=(0,t.Uk)(" 属性描述了"),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document",target:"_blank",rel:"noopener noreferrer"},k=(0,t._)("code",null,"document",-1),g=(0,t.Uk)(" 的加载状态。"),v=(0,t._)("p",null,[(0,t._)("code",null,"readystate"),(0,t.Uk)("：loading（正在加载）、interactive（可交互）、complete（完成）")],-1),f=(0,t._)("p",null,[(0,t._)("code",null,"interactive"),(0,t.Uk)("：触发"),(0,t._)("code",null,"DOMContentLoaded"),(0,t.Uk)("事件")],-1),w=(0,t._)("p",null,[(0,t._)("code",null,"complete"),(0,t.Uk)("：触发"),(0,t._)("code",null,"window的load"),(0,t.Uk)("事件")],-1),_=(0,t.uE)("<p><strong>js代码应该尽量写到页面底部，避免阻塞后续的渲染，也避免运行js时，得不到页面中的元素。</strong></p><p><strong>css代码应该写到页面顶部，避免出现闪烁（如果放到页面底部，会导致元素先没有样式，使用丑陋的默认样式，然后当读取到css文件后，重新改变样式）</strong></p><ul><li><p>unload、beforeunload（仅在IE中有效）</p><p><code>beforeunload</code>：<code>window</code>的事件，关闭窗口时运行，可以阻止关闭窗口</p><p><code>unload</code>：<code>window</code>的事件，关闭窗口时运行</p><p>区别：</p><ul><li>执行顺序：先运行<code>beforeunload</code>，后运行<code>unload</code></li><li><code>beforeunload</code>可以阻止关闭窗口，<code>unload</code>无法阻止窗口关闭</li></ul></li><li><p><code>scroll</code></p><p>窗口发生滚动时运行的事件。</p><p>通过<code>scrollTop</code>和<code>scrollLeft</code>，可以获取和设置滚动距离。</p><p>获取整个网页的<code>scrollTop</code>：</p><p>兼容性写法：<code>document.documentElement.scrollTop + document.body.scrollTop</code></p></li><li><p><code>resize</code></p><p>窗口尺寸发生改变时运行的事件。</p></li></ul><blockquote><p>窗口与元素尺寸：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>window.screen.width</code>、<br><code>window.screen.height</code></td><td>获取屏幕的宽、高</td></tr><tr><td><code>window.outerWidth</code>、<code>window.outerHeight</code></td><td>获取浏览器窗口外部的宽、高</td></tr><tr><td><code>window.innerWidth</code>、<code>window.innerHeight</code></td><td>获得浏览器窗口的内容区域的宽、高，包含垂直滚动条(如果有的话)。</td></tr><tr><td><code>document.documentElement.clientWidth</code>、<br><code>document.documentElement.clientHeight</code></td><td>获取视口的宽、高</td></tr><tr><td><code>div.clientWidth</code>、<code>div.clientHeight</code></td><td>获取div元素内部的宽、高（不包含边框）</td></tr><tr><td><code>div.offsetWidth</code>、<code>div.offsetHeight</code></td><td>获取div元素自身可视宽度加上左右border的宽度</td></tr><tr><td><code>div.scrollWidth</code>、<code>div.scrollHeight</code></td><td>获取div元素滚动视图的宽、高</td></tr></tbody></table></blockquote><ul><li><p><code>contextmenu</code></p><p>右键菜单事件</p></li><li><p><code>paste</code></p><p>粘贴事件，</p></li><li><p><code>copy</code></p><p>复制事件</p></li><li><p><code>cut</code></p><p>剪切事件</p></li></ul><blockquote><p><strong>clipboardData</strong>属性保存了一个剪切板数据对象</p><p>​ 可以通过<code>e.clipboardData.getData()</code>获取剪切板中的数据</p></blockquote>",6),D={render:function(e,o){const d=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[n,(0,t._)("ul",null,[c,(0,t._)("li",null,[l,(0,t._)("p",null,[a,(0,t._)("a",p,[i,(0,t.Wm)(d)]),s,r,u]),(0,t._)("p",null,[h,m,(0,t._)("a",b,[k,(0,t.Wm)(d)]),g]),v,f,w])]),_],64)}}}}]);