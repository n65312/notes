"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[4987],{4265:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-10bcb8e5",path:"/note/js/25.Standard-library.html",title:"26. 标准库",lang:"zh-CN",frontmatter:{title:"26. 标准库",date:"2017-06-16T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"Object",slug:"object",children:[{level:3,title:"静态成员",slug:"静态成员",children:[]},{level:3,title:"实例成员",slug:"实例成员",children:[]}]},{level:2,title:"Function",slug:"function",children:[{level:3,title:"实例成员",slug:"实例成员-1",children:[]}]}],filePathRelative:"note/js/25.Standard-library.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},5172:(n,a,s)=>{s.r(a),s.d(a,{default:()=>b});var e=s(6252);const t=(0,e._)("h1",{id:"标准库-标准-api",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#标准库-标准-api","aria-hidden":"true"},"#"),(0,e.Uk)(" 标准库（标准 API）")],-1),p=(0,e._)("ul",null,[(0,e._)("li",null,"库：library"),(0,e._)("li",null,"API：应用程序编程接口，Application Programing Interface"),(0,e._)("li",null,"标准：ECMAScript 标准")],-1),o=(0,e._)("h2",{id:"object",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#object","aria-hidden":"true"},"#"),(0,e.Uk)(" Object")],-1),c={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("MDN"),r=(0,e.uE)('<h3 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员" aria-hidden="true">#</a> 静态成员</h3><ul><li><p><code>Object.keys(obj)</code>，返回一个表示给定对象的所有可枚举属性的字符串数组。</p></li><li><p><code>Object.values(obj)</code>，返回一个包含对象自身的所有可枚举属性值的数组。</p></li><li><p><code>Object.entries(obj)</code>，返回给定对象自身可枚举属性的键值对数组。</p></li></ul><h3 id="实例成员" tabindex="-1"><a class="header-anchor" href="#实例成员" aria-hidden="true">#</a> 实例成员</h3><blockquote><p>实例成员可以被重写</p></blockquote><p><strong>所有对象，都拥有 Object 的所有实例成员。</strong></p><ul><li><p><code>toString()</code>：</p><p>返回一个表示该对象的字符串。默认情况下，该方法返回<code>[object Object]</code>。</p></li><li><p><code>valueOf()</code>：</p><p>返回值为该对象的原始值。默认情况下，<code>valueOf</code> 将返回对象本身。</p></li></ul><blockquote><p>在 JS 中，当自动的进行类型转换时，如果要对一个对象进行转换，实际上是先调用对象的<code>valueOf()</code>方法，然后调用<code>toString()</code>方法，将得到的结果进行进一步的转换。</p></blockquote><blockquote><p>如果调用<code>valueOf()</code>方法已经得到了原始类型，则不再调用<code>toString()</code>方法</p></blockquote><h2 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h2>',9),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("MDN"),d=(0,e.uE)('<p><strong>所有函数，都具有 Function 中的实例成员。</strong></p><p><strong>语法：arguments 在函数中使用，以数组形式获取传入函数的所有参数。</strong></p><p><strong>注意：arguments 是一个类数组（也称为伪数组：没有通过 Array 构造函数创建的类似于数组结构的对象），伪数组会缺少大量的数组实例方法。</strong></p><p><strong>arguments 数组中的值，会与对应的形参映射。</strong></p><h3 id="实例成员-1" tabindex="-1"><a class="header-anchor" href="#实例成员-1" aria-hidden="true">#</a> 实例成员</h3><ul><li><p><code>length</code> 属性：</p><p>获取函数的接收参数个数（形参个数）。</p></li><li><p><code>apply()</code> 方法：</p><p>调用函数，同时指定函数中的 this 指向，参数以数组传递</p></li><li><p><code>call()</code> 方法：</p><p>调用函数，同时指定函数中的 this 指向，参数以列表传递</p></li><li><p><code>bind()</code> 方法：</p><p>创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p></li></ul><p>通常，可以利用 <strong>apply</strong>、<strong>call</strong> 方法，将伪数组转换为真数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token comment">// 将 arguments 转换为真数组</span>\n  <span class="token comment">// 使用数组的 slice 方法 通过 call 改变 this指向</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">423</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',8),b={render:function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,o,(0,e._)("p",null,[(0,e._)("a",c,[l,(0,e.Wm)(s)])]),r,(0,e._)("p",null,[(0,e._)("a",i,[u,(0,e.Wm)(s)])]),d],64)}}}}]);