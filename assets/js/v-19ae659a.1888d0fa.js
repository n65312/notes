"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[5097],{6816:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-19ae659a",path:"/note/js/23.Function-essence.html",title:"24. 函数的本质",lang:"zh-CN",frontmatter:{title:"24. 函数的本质",date:"2017-06-15T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"包装类",slug:"包装类",children:[]}],filePathRelative:"note/js/23.Function-essence.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},8733:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="函数的本质" tabindex="-1"><a class="header-anchor" href="#函数的本质" aria-hidden="true">#</a> 函数的本质</h1><div class="custom-container tip"><p class="custom-container-title">函数的本质就是对象。</p><p>构造函数也称为构造器</p><p>所有的对象都是通过 new 关键字创建出来的，<code>new 构造函数()</code>。</p><p>所有的函数都是通过<code>new Function</code>创建的。</p><p>Function -&gt; 产生函数对象 -&gt; 产生普通对象</p></div><p>由于函数本身就是对象，因此函数中，可以拥有各种属性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 写法1</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token number">456</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 写法2</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">123</span>\nobj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">456</span>\n\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\narr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\narr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>\narr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>\n\n<span class="token comment">// 写法1 是语法糖，相当于写法2</span>\n<span class="token comment">//...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类" aria-hidden="true">#</a> 包装类</h2><p>JS 为了增强原始类型的功能，为 boolean、string、number 分别创建了一个构造函数：</p><ol><li>Boolean</li><li>String</li><li>Number</li></ol><p>如果语法上，将原始类型当作对象使用时（一般是在使用属性时），JS 会自动在该位置利用对应的构造函数，创建对象来访问原始类型的属性。</p><blockquote><p>类： 在 JS 中，可以认为，类就是构造函数。</p><p>成员属性（方法）、实例属性（方法）：表示该属性是通过构造函数创建的对象调用的。</p><p>静态属性（方法）、类属性（方法）：表示该属性是通过构造函数本身调用的。</p></blockquote>',9),p={render:function(n,s){return e}}}}]);