"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[6654],{7639:(e,a,t)=>{t.r(a),t.d(a,{data:()=>r});const r={key:"v-73b8df25",path:"/note/js/20.Scope-Closure.html",title:"21. 作用域和闭包",lang:"zh-CN",frontmatter:{title:"21. 作用域和闭包",date:"2017-06-15T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"作用域",slug:"作用域",children:[]},{level:2,title:"作用域中可以使用的变量",slug:"作用域中可以使用的变量",children:[]},{level:2,title:"闭包",slug:"闭包",children:[]}],filePathRelative:"note/js/20.Scope-Closure.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},4359:(e,a,t)=>{t.r(a),t.d(a,{default:()=>p});const r=(0,t(6252).uE)('<h1 id="作用域和闭包" tabindex="-1"><a class="header-anchor" href="#作用域和闭包" aria-hidden="true">#</a> 作用域和闭包</h1><h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><p>作用域表示一个代码区域，也表示一个运行环境</p><p>JS 中，有两种作用域：</p><ol><li>全局作用域</li></ol><p>直接在脚本中书写的代码</p><p>在全局作用域中声明的变量，会被提升到脚本块的顶部，会成为全局对象（window）的属性。</p><ol start="2"><li>函数作用域</li></ol><p>函数中的代码</p><p>在函数中声明的变量，会被提升到函数的顶部，不会成为全局对象（window）的属性。</p><p><strong>因此函数中声明的变量不会导致全局对象的污染</strong></p><p><strong>尽量把功能封装到函数中</strong></p><p>但是，当函数成为一个表达式时，它既不会提升，也不会污染全局对象。</p><p>将函数变为一个函数表达式的方式之一，把函数放在小括号中。</p><p>然而，这样一来，函数无法使用名称调用</p><p>如果书写一个函数表达式，然后将其立即调用，该函数称为立即执行函数 IIFE（Immediately-invoked function expression）。</p><p>由于大部分情况下，函数表达式的函数名没有任何意义，因此，可以省略函数名。</p><p>没有名字的函数，称为匿名函数。</p><h2 id="作用域中可以使用的变量" tabindex="-1"><a class="header-anchor" href="#作用域中可以使用的变量" aria-hidden="true">#</a> 作用域中可以使用的变量</h2><p>全局作用域只能使用全局作用域中声明的变量（包括函数）</p><p>函数作用域中不仅能使用自身作用域中声明的变量（包括函数），还可以使用外部环境的变量（包括函数）</p><p>有的时候，某个函数比较复杂，在编写的过程，可能需要另外一些函数来辅助它来完成一些功能，而这些函数仅仅会被该函数使用，不会在其他位置使用，则可以将这些函数声明到该函数的内部。</p><p>函数内部声明的变量和外部变量冲突时，会使用函数内部的。</p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>闭包（closure），严格来说是一种现象，内部函数，可以使用外部环境的变量（包括函数）</p><p>一个闭包，就是 一个函数 与其 被创建时所带有的作用域对象 的组合。闭包允许你保存状态——所以，它们可以用来代替对象。</p>',26),p={render:function(e,a){return r}}}}]);