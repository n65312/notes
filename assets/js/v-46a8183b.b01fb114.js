"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[329],{7077:(e,a,l)=>{l.r(a),l.d(a,{data:()=>o});const o={key:"v-46a8183b",path:"/note/js/6.Operator.html",title:"7. 运算符概述",lang:"zh-CN",frontmatter:{title:"7. 运算符概述",date:"2017-06-13T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"操作符和操作数",slug:"操作符和操作数",children:[]},{level:2,title:"分类",slug:"分类",children:[]},{level:2,title:"表达式",slug:"表达式",children:[]}],filePathRelative:"note/js/6.Operator.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},1906:(e,a,l)=>{l.r(a),l.d(a,{default:()=>n});const o=(0,l(6252).uE)('<h1 id="运算符概述" tabindex="-1"><a class="header-anchor" href="#运算符概述" aria-hidden="true">#</a> 运算符概述</h1><p>变量和数据类型，解决数据存放问题</p><p>运算符，解决数据运算的问题，面试题密集</p><h2 id="操作符和操作数" tabindex="-1"><a class="header-anchor" href="#操作符和操作数" aria-hidden="true">#</a> 操作符和操作数</h2><p>操作符：运算符，参数运算的符号。</p><p>操作数：参与运算的数据，也称之为“元”。</p><p>操作符不一定只有一个符号。</p><p>操作符出现在不同的位置，可能具有不同的含义。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span> <span class="token comment">// 表示两个数相加</span>\n\n<span class="token operator">+</span><span class="token number">1.2</span> <span class="token comment">// 表示一个正数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>目前接触的操作符：</p><ol><li><code>=</code>：赋值符号，将右边的数据赋值给左边。</li><li><code>.</code>：访问符号，用于访问对象的属性。</li><li><code>[]</code>：访问符号，用于访问对象的属性。</li><li><code>()</code>：函数调用 或 改变运算符的优先级。</li></ol><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><p>按操作数数量区分：</p><ol><li>一元运算符：<code>()</code> <code>.</code> <code>[]</code></li><li>二元运算符：<code>+</code> <code>-</code> <code>/</code> <code>*</code> <code>%</code> <code>=</code></li><li>三元运算符：<code>? :</code></li></ol><p>功能区分：</p><ol><li>算术运算符（数学）</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li><li>其他</li></ol><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h2><p>表达式 = 操作符 + 操作数</p><p>每个表达式都有一个运算结果，该结果叫<strong>返回值</strong>，返回值的类型叫做<strong>返回类型</strong>。</p><p>所有的表达式都可以当作数据来使用。</p><p>目前学习的运算符的返回值和类型</p><ol><li><code>=</code>：该表达式，返回赋值的结果。</li><li><code>.</code>：属性访问表达式，返回的是属性的值。</li><li><code>[]</code>：属性访问表达式，返回的是属性的值。</li><li><code>()</code>：函数调用表达式，返回的结果取决于函数的运行。</li><li>如果是一个声明+赋值的表达式，返回结果为<code>undefined</code>。</li></ol><p>console.log()函数调用的返回结果为<code>undefined</code>。</p><blockquote><p>chrome 浏览器控制台的环境是 REPL 环境。</p><p>REPL：Read Eval Print Loop，读-执行-打印-循环。 当直接在控制台书写代码时，除了运行代码之外，还会输出该表达式的返回值。</p></blockquote>',24),n={render:function(e,a){return o}}}}]);