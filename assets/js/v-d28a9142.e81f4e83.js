"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[612],{8506:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-d28a9142",path:"/note/js/11.Digital-storage.html",title:"12. 数字的存储",lang:"zh-CN",frontmatter:{title:"12. 数字的存储",date:"2017-06-14T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"问题",slug:"问题",children:[]},{level:2,title:"二进制",slug:"二进制",children:[{level:3,title:"二进制转十进制",slug:"二进制转十进制",children:[]},{level:3,title:"十进制转二进制",slug:"十进制转二进制",children:[]}]},{level:2,title:"为什么 JS 的小数运算不精确？",slug:"为什么-js-的小数运算不精确",children:[]},{level:2,title:"JS 如何存储数字？",slug:"js-如何存储数字",children:[]},{level:2,title:"能表示的最大数字",slug:"能表示的最大数字",children:[]},{level:2,title:"能表示的最大安全整数",slug:"能表示的最大安全整数",children:[]}],filePathRelative:"note/js/11.Digital-storage.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},7445:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="数字的存储" tabindex="-1"><a class="header-anchor" href="#数字的存储" aria-hidden="true">#</a> 数字的存储</h1><p><strong>在对精度要求很高的系统中，或对小数的运算结果进行比较时，需要特别谨慎</strong></p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><ol><li><p>JS 中的小数运算是精确的吗？</p><p>不一定</p></li><li><p>JS 中的整数运算是精确的吗？</p><p>不一定</p></li><li><p>JS 中表示的整数是连续的吗？</p><p>不是，当 JS 的数字很大的时候，不再连续。</p></li><li><p>JS 中表示的最大数字是多少</p><p>最大连续整数(Number.MAX_SAFE_INTEGER)：9007199254740991</p></li><li><p>JS 中能表示的数字的有效位数是多少？</p><p>16 ~ 17</p><p>整数 16 位</p><p>小数 17 位</p></li></ol><h2 id="二进制" tabindex="-1"><a class="header-anchor" href="#二进制" aria-hidden="true">#</a> 二进制</h2><p>现实世界中：十进制，10 个数字，逢十进一</p><p>计算机世界中：二进制，2 个数字，逢二进一</p><h3 id="二进制转十进制" tabindex="-1"><a class="header-anchor" href="#二进制转十进制" aria-hidden="true">#</a> 二进制转十进制</h3><p>采用按权相加法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1101</span> <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">13</span>\n<span class="token comment">// 8 + 4 + 0 + 1 = 13</span>\n\n<span class="token number">11.01</span> <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">3.25</span>\n<span class="token comment">// 2 + 1 + 0 + 0.25 = 3.25</span>\n<span class="token comment">// 一个数的负次方即为这个数的正次方的倒数。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">说明：</p><p>2的几次方怎么确定？</p><p>比如从左数的第一位1，在它前面还有3位，那么它的次数就是为3。</p></div><h3 id="十进制转二进制" tabindex="-1"><a class="header-anchor" href="#十进制转二进制" aria-hidden="true">#</a> 十进制转二进制</h3><p>13 --&gt; 1101</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">13</span> <span class="token operator">/</span> <span class="token number">2</span>  商<span class="token number">6</span>   余<span class="token number">1</span>\n<span class="token number">6</span>  <span class="token operator">/</span> <span class="token number">2</span>  商<span class="token number">3</span>   余<span class="token number">0</span>\n<span class="token number">3</span>  <span class="token operator">/</span> <span class="token number">2</span>  商<span class="token number">1</span>   余<span class="token number">1</span>\n<span class="token number">1</span>  <span class="token operator">/</span> <span class="token number">2</span>  商<span class="token number">0</span>   余<span class="token number">1</span>\n<span class="token comment">// 商为0，结束。余数从下往上看</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>3.25 --&gt; 11.01</p><p>整数部分</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">3</span>  <span class="token operator">/</span> <span class="token number">2</span>  商<span class="token number">1</span>   余<span class="token number">1</span>\n<span class="token number">1</span>  <span class="token operator">/</span> <span class="token number">2</span>  商<span class="token number">0</span>   余<span class="token number">1</span>\n<span class="token comment">//余数从下往上看</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>小数部分</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">0.25</span> <span class="token operator">*</span> <span class="token number">2</span>     <span class="token number">0.5</span>    整数部分：<span class="token number">0</span>\n<span class="token number">0.5</span>  <span class="token operator">*</span> <span class="token number">2</span>     <span class="token number">1.0</span>    整数部分：<span class="token number">1</span>\n<span class="token comment">//小数为0，结束。整数部分从上往下看</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="为什么-js-的小数运算不精确" tabindex="-1"><a class="header-anchor" href="#为什么-js-的小数运算不精确" aria-hidden="true">#</a> 为什么 JS 的小数运算不精确？</h2><p>十进制的小数，转换为二进制后，可能是无限小数，但是计算机对数字的存储能力有限，一次会丢失一些数据。</p><p>十进制数 0.3 --&gt; 0.010011001100110011001100110011001100110011001100110011</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">0.3</span><span class="token operator">*</span><span class="token number">2</span>    <span class="token number">0.6</span>    <span class="token number">0</span>\n<span class="token number">0.6</span><span class="token operator">*</span><span class="token number">2</span>    <span class="token number">1.2</span>    <span class="token number">1</span>\n<span class="token number">0.2</span><span class="token operator">*</span><span class="token number">2</span>\t\t <span class="token number">0.4</span>    <span class="token number">0</span>\n<span class="token number">0.4</span><span class="token operator">*</span><span class="token number">2</span>    <span class="token number">0.8</span>    <span class="token number">0</span>\n<span class="token number">0.8</span><span class="token operator">*</span><span class="token number">2</span>    <span class="token number">1.6</span>    <span class="token number">1</span>\n<span class="token number">0.6</span><span class="token operator">*</span><span class="token number">2</span>    <span class="token number">1.2</span>    <span class="token number">1</span>\n<span class="token number">0.2</span><span class="token operator">*</span><span class="token number">2</span>    <span class="token number">0.4</span>    <span class="token number">0</span>\n<span class="token operator">...</span><span class="token operator">...</span>循环\n整数部分从上往下看\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="js-如何存储数字" tabindex="-1"><a class="header-anchor" href="#js-如何存储数字" aria-hidden="true">#</a> JS 如何存储数字？</h2><p>整数法、浮点法</p><p>JS 中，存储的所有数字，都按照浮点法存放。</p><p>浮点法存放的数字，叫做浮点数（float），浮点数分为单精度和双精度。</p><p>JS 中，使用双精度存放浮点数，IEEE 754。</p><p><strong>存放方式</strong></p><p>JS 在计算机中，给每个数字开辟一块内存空间，尺寸固定为 64 位。</p><blockquote><p>在计算机中，位（bit）是最小的存储单位，简称位 bit 1 byte = 8 bit 1 KB = 1024 byte 1 MB = 1024 KB 1 GB = 1024 MB</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span>第<span class="token number">1</span>段<span class="token punctuation">]</span><span class="token punctuation">[</span>第<span class="token number">2</span>段<span class="token punctuation">]</span><span class="token punctuation">[</span>第<span class="token number">3</span>段<span class="token punctuation">]</span>\n第<span class="token number">1</span>段：<span class="token number">1</span>位，表示符号位，如果为<span class="token number">1</span>，是负数，为<span class="token number">0</span>，是正数\n第<span class="token number">2</span>段：<span class="token number">11</span>位，表示指数位，这里的指数是<span class="token number">2</span>为底的指数，而不是<span class="token number">10</span>\n第<span class="token number">3</span>段：<span class="token number">52</span>位，表示有效数字\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>举例</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">0</span>     <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">011</span>     <span class="token number">1111</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token operator">...</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>相当于：$ 1.1111 * 2 ^ {1027 - 1023} $</p><p><strong>特殊情况：</strong></p><ol><li>指数为 0，尾数为 0，表示数字 0</li><li>符号为 0，指数为 2047，尾数为 0，表示正无穷</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Infinity：0  11111111111  0000000000...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>符号为 1，指数为 2047，尾数为 0，表示负无穷</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>-Infinity：1  11111111111  0000000000...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="4"><li>指数为 2047，尾数不为 0，表示 NaN</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>NaN：1  11111111111   10010011000...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>一个正常的数字，指数部分最多是 2046</strong></p><h2 id="能表示的最大数字" tabindex="-1"><a class="header-anchor" href="#能表示的最大数字" aria-hidden="true">#</a> 能表示的最大数字</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>0  1111 1111 110  1111111111...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>相当于：1.111111111... * 2 ^ {1023}</p><h2 id="能表示的最大安全整数" tabindex="-1"><a class="header-anchor" href="#能表示的最大安全整数" aria-hidden="true">#</a> 能表示的最大安全整数</h2><p>安全整数：从 1 开始，到该数字，均是连续的整数，并且该数字的下一个整数是存在的。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>0  xxxx xxxx xxx  111111111...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>相当于： 2^{53} - 1</p><p>下一位： 2^{53} <code>0 xxxxxxxxxxx 000000000000...</code></p>',51),p={render:function(s,n){return e}}}}]);