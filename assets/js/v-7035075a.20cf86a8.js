"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[7874],{5582:(e,t,i)=>{i.r(t),i.d(t,{data:()=>a});const a={key:"v-7035075a",path:"/note/js/21.Function-this.html",title:"22. 函数表达式和 this",lang:"zh-CN",frontmatter:{title:"22. 函数表达式和 this",date:"2017-06-15T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"函数表达式",slug:"函数表达式",children:[]},{level:2,title:"this 关键字",slug:"this-关键字",children:[]}],filePathRelative:"note/js/21.Function-this.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},782:(e,t,i)=>{i.r(t),i.d(t,{default:()=>h});const a=(0,i(6252).uE)('<h1 id="函数表达式和-this" tabindex="-1"><a class="header-anchor" href="#函数表达式和-this" aria-hidden="true">#</a> 函数表达式和 this</h1><h2 id="函数表达式" tabindex="-1"><a class="header-anchor" href="#函数表达式" aria-hidden="true">#</a> 函数表达式</h2><p>JS 中，函数也是一个数据，语法上，函数可以用于任何需要数据的地方</p><p>JS 中，函数是一等公民</p><p>函数是一个引用类型，将其赋值给某个变量时，变量中保存的是函数的地址</p><h2 id="this-关键字" tabindex="-1"><a class="header-anchor" href="#this-关键字" aria-hidden="true">#</a> this 关键字</h2><blockquote><p>this 无法赋值</p></blockquote><ol><li><p>在全局作用域中，this 关键字固定指向全局对象。</p></li><li><p>在函数作用域中，取决于函数是如何调用的</p></li></ol><ul><li>函数直接调用，this 指向全局对象</li><li>通过一个对象调用，格式为<code>对象.属性()</code> 或 <code>对象[&#39;属性&#39;]()</code>，此时，this 指向这个对象</li></ul>',9),h={render:function(e,t){return a}}}}]);