"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[595],{4350:(e,l,a)=>{a.r(l),a.d(l,{data:()=>o});const o={key:"v-14f9ac41",path:"/note/js/30.Regular-expression.html",title:"31. 正则表达式",lang:"zh-CN",frontmatter:{title:"31. 正则表达式",date:"2017-06-20T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"基础",slug:"基础",children:[]},{level:2,title:"JS 中的应用",slug:"js-中的应用",children:[{level:3,title:"创建正则对象",slug:"创建正则对象",children:[]},{level:3,title:"静态属性",slug:"静态属性",children:[]},{level:3,title:"实例属性",slug:"实例属性",children:[]},{level:3,title:"实例方法",slug:"实例方法",children:[]},{level:3,title:"字符串对象中的正则",slug:"字符串对象中的正则",children:[]}]},{level:2,title:"进阶",slug:"进阶",children:[{level:3,title:"捕获组",slug:"捕获组",children:[]},{level:3,title:"反向引用",slug:"反向引用",children:[]},{level:3,title:"正向断言（预查）",slug:"正向断言-预查",children:[]},{level:3,title:"正向断言（预查）",slug:"正向断言-预查-1",children:[]}]}],filePathRelative:"note/js/30.Regular-expression.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},7924:(e,l,a)=>{a.r(l),a.d(l,{default:()=>x});var o=a(6252);const n=(0,o._)("h1",{id:"正则表达式",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#正则表达式","aria-hidden":"true"},"#"),(0,o.Uk)(" 正则表达式")],-1),s={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"},t=(0,o.Uk)("MDN"),c={href:"https://www.runoob.com/regexp/regexp-syntax.html",target:"_blank",rel:"noopener noreferrer"},p=(0,o.Uk)("菜鸟教程"),i=(0,o.uE)('<p>正则表达式是国际标准，跨语言。</p><p>正则表达式是一个规则，用于验证字符串。</p><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><ol><li>字面量匹配</li></ol><p>规则中直接书写字面量字符</p><ol start="2"><li>特殊字符</li></ol><ul><li><code>.</code> 匹配除换行符之外的任何单个字符。</li><li><code>^</code> 匹配输入的开始。</li><li><code>$</code> 匹配输入的结束。</li><li><code>()</code> 标记一个子表达式的开始和结束位置</li></ul><ol start="3"><li>转义符</li></ol><ul><li><code>\\n</code> 匹配一个换行符</li><li><code>\\r</code> 不要使用，出现在 Windows 操作系统中。</li><li><code>\\t</code> 匹配一个制表符</li><li><code>\\s</code> 匹配一个空白字符，包括空格、制表符、换页符和换行符。</li><li><code>\\S</code> 匹配一个非空白字符。</li><li><code>\\b</code> 匹配一个单词的边界。</li><li><code>\\B</code> 匹配一个非单词边界。</li><li><code>\\d</code> 匹配一个数字。等价于<code>[0-9]</code>。</li><li><code>\\D</code> 匹配一个非数字字符。等价于<code>[^0-9]</code>。</li><li><code>\\w</code> 匹配一个单字字符（字母、数字或者下划线）。等价于 <code>[A-Za-z0-9_]</code>。</li><li><code>\\W</code> 匹配一个非单字字符。等价于 <code>[^A-Za-z0-9_]</code>。</li><li><code>\\uhhhh</code> 匹配一个十六进制数表示的 Unicode 字符。<code>h</code>表示一个十六进制的 Unicode 字符</li></ul><p>转义符<code>\\</code>可以将特殊字符转义</p><ol start="4"><li>字符集</li></ol><p><code>[字符范围]</code><code>[^字符范围]</code> 对字符范围取反</p><p>匹配中文：<code>[\\u4e00-\\u9fa5]</code></p><ol start="5"><li>量词</li></ol><p><strong>匹配前面一个表达式出现的次数</strong></p><ul><li><code>*</code> 匹配前一个表达式 0 次或多次。等价于 {0,}。</li><li><code>+</code> 匹配前一个表达式 1 次或多次。等价于 {1,}。</li><li><code>?</code> 匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。</li><li><code>{n}</code> 匹配 n 个</li><li><code>{n,}</code> 匹配 &gt;=n 个</li><li><code>{n,m}</code> 匹配 n~m 个</li></ul><ol start="6"><li>或者</li></ol><p>多个规则之间适用，或者<code>|</code>，表示多个规则任选其一。</p><h2 id="js-中的应用" tabindex="-1"><a class="header-anchor" href="#js-中的应用" aria-hidden="true">#</a> JS 中的应用</h2><p>JS 中，正则表达式表现为一个对象，是通过构造函数 RegExp 创建的</p><h3 id="创建正则对象" tabindex="-1"><a class="header-anchor" href="#创建正则对象" aria-hidden="true">#</a> 创建正则对象</h3><ol><li><p>字面量</p><p>由斜杠包围而不是引号包围。<code>/正则表达式/</code></p></li><li><p>构造函数模式</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//以下三种表达式都会创建相同的正则表达式：</span>\n<span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab+c</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>\n<span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;ab+c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab+c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="静态属性" tabindex="-1"><a class="header-anchor" href="#静态属性" aria-hidden="true">#</a> 静态属性</h3><ul><li><p>RegExp.lastIndex</p><p>该索引表示从哪里开始下一个匹配</p></li></ul><h3 id="实例属性" tabindex="-1"><a class="header-anchor" href="#实例属性" aria-hidden="true">#</a> 实例属性</h3><ul><li><p>global</p><p>判断是否开启全局匹配，根据情况返回 true 或 false。</p></li><li><p>ignoreCase</p><p>是否忽略字符大小写。</p></li><li><p>multiline</p><p>是否开启多行模式匹配。</p></li><li><p>source</p><p>得到正则表达式的文本，不包括正则字面量两侧的斜杠与标志字符。</p></li></ul><h3 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法" aria-hidden="true">#</a> 实例方法</h3><ul><li><p><code>test()</code></p><p>用来查看正则表达式与指定的字符串是否匹配，返回 true 或 false。</p></li><li><p><code>exec()</code></p><p>execute 的缩写，执行匹配，得到匹配的结果，返回一个结果数组或 null。</p></li></ul><blockquote><p>正则表达式，默认情况，使用贪婪模式（尽可能多匹配）</p></blockquote><blockquote><p>在量词后面，加上<code>?</code>，表示进入非贪婪模式。</p></blockquote><h3 id="字符串对象中的正则" tabindex="-1"><a class="header-anchor" href="#字符串对象中的正则" aria-hidden="true">#</a> 字符串对象中的正则</h3>',32),r=(0,o.uE)("<li><p><code>match()</code></p><p>使用正则表达式与字符串相比较。</p><p>返回值：</p><ul><li>如果使用 g 标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。</li><li>如果未使用 g 标志，则仅返回第一个完整匹配及其相关的捕获组（Array）。返回的数组有附加属性 <ul><li>groups: 一个捕获组数组 或 undefined（如果没有定义命名捕获组）。</li><li>index: 匹配的结果的开始位置</li><li>input: 搜索的字符串.</li></ul></li></ul></li><li><p><code>search()</code></p><p>对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。</p></li><li><p><code>split()</code></p><p>使用指定的分隔符字符串将一个 String 对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。</p><p><strong>语法：</strong></p><blockquote><p>str.split([separator[, limit]])</p></blockquote><p><strong>参数：</strong></p><p><strong>separator</strong></p><blockquote><p>指定表示每个拆分应发生的点的字符串。separator 可以是一个字符串或正则表达式。</p></blockquote><p><strong>limit</strong></p><blockquote><p>一个整数，限定返回的分割片段数量。</p></blockquote></li>",3),d=(0,o._)("code",null,"replace()",-1),u=(0,o.Uk)(),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace",target:"_blank",rel:"noopener noreferrer"},g=(0,o.Uk)("MDN"),b=(0,o.uE)("<p>返回替换后的新字符串，原字符串不会改变。</p><p><strong>语法：</strong></p><blockquote><p><code>str.replace(regexp | substr, newSubStr | function)</code></p></blockquote><p><strong>参数：</strong></p><p><strong>regexp (pattern)</strong></p><blockquote><p>一个 RegExp 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。</p></blockquote><p><strong>substr (pattern)</strong></p><blockquote><p>一个将被 newSubStr 替换的 字符串。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。</p></blockquote><p><strong>newSubStr (replacement)</strong></p><blockquote><p>用于替换掉第一个参数在原字符串中的匹配部分的字符串。该字符串中可以内插一些特殊的变量名。</p></blockquote><p><strong>function (replacement)</strong></p><blockquote><p>一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果。</p></blockquote>",12),k=(0,o.uE)('<h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶" aria-hidden="true">#</a> 进阶</h2><h3 id="捕获组" tabindex="-1"><a class="header-anchor" href="#捕获组" aria-hidden="true">#</a> 捕获组</h3><p>用小括号包裹的部分叫做捕获组，捕获组会出现在匹配结果中。</p><p><code>(正则表达式)</code></p><p>捕获组可以命名，叫做具名捕获组。在小括号前添加 <code>?&lt;捕获组名字&gt;</code></p><p><code>(?&lt;捕获组名字&gt;正则表达式)</code></p><p>非捕获组 在小括号前添加 <code>?:</code></p><p><code>(?:正则表达式)</code></p><h3 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用" aria-hidden="true">#</a> 反向引用</h3><p>在正则表达式中，使用某个捕获组，<code>\\捕获组编号</code></p><h3 id="正向断言-预查" tabindex="-1"><a class="header-anchor" href="#正向断言-预查" aria-hidden="true">#</a> 正向断言（预查）</h3><p>检查某个字符后面的字符<strong>是否满足某个规则</strong>，该规则不成为匹配结果，并且不成为捕获组。 <code>(?=正则表达式)</code></p><h3 id="正向断言-预查-1" tabindex="-1"><a class="header-anchor" href="#正向断言-预查-1" aria-hidden="true">#</a> 正向断言（预查）</h3><p>检查某个字符后面的字符<strong>是否不满足某个规则</strong>，该规则不成为匹配结果，并且不成为捕获组。<code>(?!正则表达式)</code></p>',14),x={render:function(e,l){const a=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[n,(0,o._)("p",null,[(0,o._)("a",s,[t,(0,o.Wm)(a)]),(0,o._)("a",c,[p,(0,o.Wm)(a)])]),i,(0,o._)("ul",null,[r,(0,o._)("li",null,[(0,o._)("p",null,[d,u,(0,o._)("a",h,[g,(0,o.Wm)(a)])]),b])]),k],64)}}}}]);