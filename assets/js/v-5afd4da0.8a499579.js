"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[4750],{5699:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5afd4da0",path:"/note/js/47.Attribute-descriptor.html",title:"48. 属性描述符",lang:"zh-CN",frontmatter:{title:"48. 属性描述符",date:"2017-06-27T00:00:00.000Z",tags:["JS进阶"]},excerpt:"",headers:[{level:2,title:"Object.defineProperty()",slug:"object-defineproperty",children:[]},{level:2,title:"Object.getOwnPropertyDescriptor()",slug:"object-getownpropertydescriptor",children:[]}],filePathRelative:"note/js/47.Attribute-descriptor.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},1826:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var p=a(6252);const e=(0,p._)("h1",{id:"属性描述符",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#属性描述符","aria-hidden":"true"},"#"),(0,p.Uk)(" 属性描述符")],-1),t={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("属性描述符配置参考 MDN"),c=(0,p.uE)('<h2 id="object-defineproperty" tabindex="-1"><a class="header-anchor" href="#object-defineproperty" aria-hidden="true">#</a> Object.defineProperty()</h2><blockquote><p>语法：<strong>Object.defineProperty(obj, prop, descriptor)</strong></p></blockquote><p>参数：</p><ul><li><p>obj</p><p>要定义属性的对象。</p></li><li><p>prop</p><p>要定义或修改的属性的名称</p></li><li><p>descriptor</p><p>要定义或修改的属性描述符。</p></li></ul><blockquote><p>属性描述符：它表达了一个属性的相关信息（元数据），它本质上是一个对象。</p></blockquote><ol><li><p>数据属性</p></li><li><p>存取器属性：</p><ul><li><p>当给它赋值时，会自动运行一个函数。</p></li><li><p>当获取它的值时，会自动运行一个函数。</p></li></ul></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 属性描述符</span>\n  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当读取属性时，运行的函数</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取属性x&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment">// 该函数的返回值，将作为属性值</span>\n    <span class="token keyword">return</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当给属性赋值时，运行的函数</span>\n    <span class="token comment">// val：表示要赋的值</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;给属性赋值为&#39;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nobj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">// 相当于运行了 set(3)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n  <span class="token comment">// 年龄的范围取值：0～100</span>\n  <span class="token comment">// 如果年龄的取值小于了0，则赋值为0；如果年龄的值大于了100，则赋值为100。</span>\n  <span class="token keyword">var</span> _age\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;运行了age的get&#39;</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> _age\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;运行了age的set：&#39;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        val <span class="token operator">=</span> <span class="token number">0</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        val <span class="token operator">=</span> <span class="token number">100</span>\n      <span class="token punctuation">}</span>\n      _age <span class="token operator">=</span> val\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\nu<span class="token punctuation">.</span>age <span class="token operator">=</span> user<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">10000</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span>\n\n<span class="token comment">// 上面代码执行结果：</span>\n\n<span class="token comment">// 运行了age的set：-1</span>\n<span class="token comment">// 运行了age的get</span>\n<span class="token comment">// 运行了age的set：10000</span>\n<span class="token comment">// 运行了age的get</span>\n<span class="token comment">// 100</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="object-getownpropertydescriptor" tabindex="-1"><a class="header-anchor" href="#object-getownpropertydescriptor" aria-hidden="true">#</a> Object.getOwnPropertyDescriptor()</h2>',10),l={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("参考 MDN"),u=(0,p._)("p",null,"返回指定对象上一个自有属性对应的属性描述符。",-1),i=(0,p._)("blockquote",null,[(0,p._)("p",null,"语法：Object.getOwnPropertyDescriptor(obj, prop)")],-1),k=(0,p._)("p",null,"参数：",-1),b=(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,"obj"),(0,p._)("p",null,"需要查找的目标对象")]),(0,p._)("li",null,[(0,p._)("p",null,"prop"),(0,p._)("p",null,"目标对象内属性名称")])],-1),m={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[(0,p._)("a",t,[o,(0,p.Wm)(a)])]),c,(0,p._)("p",null,[(0,p._)("a",l,[r,(0,p.Wm)(a)])]),u,i,k,b],64)}}}}]);