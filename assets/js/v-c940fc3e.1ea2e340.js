"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[8523],{9418:(e,a,t)=>{t.r(a),t.d(a,{data:()=>r});const r={key:"v-c940fc3e",path:"/note/js/24.Recursion.html",title:"25. 递归",lang:"zh-CN",frontmatter:{title:"25. 递归",date:"2017-06-15T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"执行栈",slug:"执行栈",children:[]},{level:2,title:"尾递归",slug:"尾递归",children:[]}],filePathRelative:"note/js/24.Recursion.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},8303:(e,a,t)=>{t.r(a),t.d(a,{default:()=>i});const r=(0,t(6252).uE)('<h1 id="递归" tabindex="-1"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h1><p>函数直接或间接调用自身</p><p>避免无限调用递归，无限递归会导致执行栈溢出。</p><p>对比无限循环</p><ul><li>无限循环不会报错，也不会导致栈溢出</li><li>无限递归会导致栈溢出</li></ul><h2 id="执行栈" tabindex="-1"><a class="header-anchor" href="#执行栈" aria-hidden="true">#</a> 执行栈</h2><p>任何代码的执行都必须有一个执行环境，执行环境为代码的运行提供支持。</p><p>执行环境是放到执行栈中的。</p><p>每个函数的调用，都需要创建一个函数的执行环境，函数调用结束，执行环境销毁。</p><p>执行栈有相对固定的大小，如果执行环境过多，执行栈无法容纳，会报错<code>Uncaught RangeError: Maximum call stack size exceeded</code></p><h2 id="尾递归" tabindex="-1"><a class="header-anchor" href="#尾递归" aria-hidden="true">#</a> 尾递归</h2><p>如果一个函数最后一条语句是调用函数，并且调用函数不是表达式的一部分，则该语句称为尾调用； 如果尾调用是调用自身函数，则称为尾递归。</p><p>某些语言或执行环境，会对尾调用进行优化，它们会立即销毁当前函数，避免执行栈空间被占用。</p><p>在浏览器执行环境中，尾调用没有被优化，但在 nodejs 环境中有优化。</p>',14),i={render:function(e,a){return r}}}}]);