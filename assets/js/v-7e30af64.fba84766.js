"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[7860],{3792:(e,l,i)=>{i.r(l),i.d(l,{data:()=>a});const a={key:"v-7e30af64",path:"/note/css/20.Browser-compatibility.html",title:"21. 浏览器兼容性",lang:"zh-CN",frontmatter:{title:"21. 浏览器兼容性",date:"2017-06-11T00:00:00.000Z",tags:["CSS"]},excerpt:"",headers:[{level:2,title:"问题产生原因",slug:"问题产生原因",children:[]},{level:2,title:"厂商前缀",slug:"厂商前缀",children:[]},{level:2,title:"css hack",slug:"css-hack",children:[]},{level:2,title:"渐近增强 和 优雅降级",slug:"渐近增强-和-优雅降级",children:[]},{level:2,title:"caniuse",slug:"caniuse",children:[]}],filePathRelative:"note/css/20.Browser-compatibility.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},1724:(e,l,i)=>{i.r(l),i.d(l,{default:()=>n});var a=i(6252);const t=(0,a.uE)('<h1 id="浏览器兼容性" tabindex="-1"><a class="header-anchor" href="#浏览器兼容性" aria-hidden="true">#</a> 浏览器兼容性</h1><h2 id="问题产生原因" tabindex="-1"><a class="header-anchor" href="#问题产生原因" aria-hidden="true">#</a> 问题产生原因</h2><ul><li>市场竞争</li><li>标准版本的变化</li></ul><h2 id="厂商前缀" tabindex="-1"><a class="header-anchor" href="#厂商前缀" aria-hidden="true">#</a> 厂商前缀</h2><blockquote><p>比如：box-sizing， 谷歌旧版本浏览器中使用-webkit-box-sizing:border-box</p></blockquote><ul><li>市场竞争，标准没有发布</li><li>标准仍在讨论中（草案），浏览器厂商希望先支持</li></ul><p>IE： -ms- Chrome，safari: -webkit- opera： -o- firefox: -moz-</p><blockquote><p>浏览器在处理样式或元素时，使用如下的方式： 当遇到无法识别的代码时，直接略过。</p></blockquote><ol><li>谷歌浏览器的滚动条样式</li></ol><p>实际上，在开发中使用自定义的滚动条，往往是使用div+css+JS实现的</p><ol start="2"><li>多个背景图中选一个作为背景</li></ol><h2 id="css-hack" tabindex="-1"><a class="header-anchor" href="#css-hack" aria-hidden="true">#</a> css hack</h2><p>根据不同的浏览器（主要针对IE），设置不同的样式和元素</p><ol><li>样式</li></ol><p>IE中，CSS的特殊符号</p><ul><li>*属性，兼容IE5、IE6、IE7</li><li>_属性，兼容IE5~IE6</li><li>属性值\\9，兼容IE5~IE11</li><li>属性值\\0，兼容IE8~IE11</li><li>属性值\\9\\0，兼容IE9~IE10</li></ul><blockquote><p>IE5、6、7的外边距bug，浮动元素的左外边距翻倍</p></blockquote><ol start="2"><li>条件判断</li></ol><h2 id="渐近增强-和-优雅降级" tabindex="-1"><a class="header-anchor" href="#渐近增强-和-优雅降级" aria-hidden="true">#</a> 渐近增强 和 优雅降级</h2><p>两种解决兼容性问题的思路，会影响代码的书写风格</p><ul><li>渐近增强：先适应大部分浏览器，然后针对新版本浏览器加入新的样式</li></ul><p>书写代码时，先尽量避免书写有兼容性问题的代码，完成之后，再逐步加入新标准中的代码。</p><ul><li>优雅降级：先制作完整的功能，然后针对低版本浏览器进行特殊处理</li></ul><p>书写代码时，先不用特别在意兼容性，完成整个功能之后，再针对低版本浏览器处理样式。</p><h2 id="caniuse" tabindex="-1"><a class="header-anchor" href="#caniuse" aria-hidden="true">#</a> caniuse</h2><p>查找css兼容性</p>',26),r={href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer"},s=(0,a.Uk)("caniuse.com"),n={render:function(e,l){const i=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[t,(0,a._)("p",null,[(0,a._)("a",r,[s,(0,a.Wm)(i)])])],64)}}}}]);