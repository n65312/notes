"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[9348],{2999:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-6709f872",path:"/note/js/48.Execution-context.html",title:"49. 执行上下文",lang:"zh-CN",frontmatter:{title:"49. 执行上下文",date:"2017-06-27T00:00:00.000Z",tags:["JS进阶"]},excerpt:"",headers:[{level:2,title:"执行上下文中的内容",slug:"执行上下文中的内容",children:[]},{level:2,title:"1. this 指向",slug:"_1-this-指向",children:[]},{level:2,title:"2. VO 变量对象",slug:"_2-vo-变量对象",children:[{level:3,title:"执行过程：",slug:"执行过程",children:[]}]}],filePathRelative:"note/js/48.Execution-context.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},3150:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(6252).uE)('<h1 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文" aria-hidden="true">#</a> 执行上下文</h1><p>函数执行上下文：</p><p>一个函数运行之前，创建一个内存空间，空间中包含有该函数执行所需要的数据，为该函数执行提供支持。</p><p>执行上下文栈：</p><p>call stack，所有执行上下文组成的内存空间。</p><p>栈：</p><p>一种数据解构，先进后出，后进先出。</p><p>全局执行上下文：</p><p>所有 JS 代码执行之前，都必须有该环境。</p><p>JS 引擎始终执行的是栈顶的上下文。</p><h2 id="执行上下文中的内容" tabindex="-1"><a class="header-anchor" href="#执行上下文中的内容" aria-hidden="true">#</a> 执行上下文中的内容</h2><h2 id="_1-this-指向" tabindex="-1"><a class="header-anchor" href="#_1-this-指向" aria-hidden="true">#</a> 1. this 指向</h2><p>（1）直接调用函数，<code>this</code>指向全局对象。</p><p>（2）在函数外，<code>this</code>指向全局对象。</p><p>（3）通过对象调用或 new 一个函数，<code>this</code>指向调用的对象或新对象。</p><h2 id="_2-vo-变量对象" tabindex="-1"><a class="header-anchor" href="#_2-vo-变量对象" aria-hidden="true">#</a> 2. VO 变量对象</h2><ul><li><p>Variable Object：</p><p>VO 中记录了该环境中所有声明的参数、变量和函数。</p></li><li><p>Global Object：</p><p>GO，全局执行上下文中的 VO</p></li><li><p>Active Object：</p><p>AO，当前正在执行的上下文中的 VO。</p></li></ul><h3 id="执行过程" tabindex="-1"><a class="header-anchor" href="#执行过程" aria-hidden="true">#</a> 执行过程：</h3><ol><li><p>确定所有行参值以及特殊变量 arguments。</p></li><li><p>确定函数中通过 var 声明的变量，将它们的值设为 undefined；</p><p>如果 VO 中已有该名称，则忽略。</p></li><li><p>确定函数中通过字面量声明的函数，将它们的值设为指向函数对象；</p><p>如果 VO 中已存在该名称，则覆盖。</p></li></ol><blockquote><p>当一个上下文中的代码执行的时候，如果上下文中不存在某个属性，则会从之前的上下文寻找。</p></blockquote><p>示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> a1 <span class="token operator">=</span> a\n  <span class="token keyword">var</span> a <span class="token operator">=</span> foo\n  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n<span class="token comment">/*\n创建 全局上下文\n  GO：\n    foo: undefined --&gt; 1\n    bar: fn\n\n创建 \n  VO：\n    过程：\n      a: 3  // 确定形参  -- &gt; function a() {}\n      a1: undefined // 确定变量 -- &gt; function a() {}\n      忽略 var a = foo，因为 VO 中已经有 a 这个名称\n      字面量函数 a() 覆盖 a: 3\n    结果：\n      a: function a() {}\n      a1: function a() {}\n      a: 1\n      执行a1，\n创建\n  AO：\n    输出a // 它自己什么都没有，a需要从之前的上下文中寻找，在VO中有 a: 1\n\n最终结果：1\n\n然后依次销毁 AO VO GO\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div>',22),p={render:function(n,a){return e}}}}]);