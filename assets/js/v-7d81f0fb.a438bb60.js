"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[8108],{1550:(e,r,l)=>{l.r(r),l.d(r,{data:()=>o});const o={key:"v-7d81f0fb",path:"/note/js/26.Array-constructor.html",title:"27. Array 构造器",lang:"zh-CN",frontmatter:{title:"27. Array 构造器",date:"2017-06-16T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"静态成员",slug:"静态成员",children:[]},{level:2,title:"实例成员",slug:"实例成员",children:[{level:3,title:"访问方法",slug:"访问方法",children:[]}]}],filePathRelative:"note/js/26.Array-constructor.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},6838:(e,r,l)=>{l.r(r),l.d(r,{default:()=>n});var o=l(6252);const p=(0,o._)("h1",{id:"array-构造器",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#array-构造器","aria-hidden":"true"},"#"),(0,o.Uk)(" Array 构造器")],-1),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"},a=(0,o.Uk)("MDN"),t=(0,o.uE)('<p>凡是通过 Array 构造函数创建的对象，都是数组。</p><h2 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员" aria-hidden="true">#</a> 静态成员</h2><ul><li><p><code>Array.from()</code>：可以将伪数组转为真数组。方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p></li><li><p><code>Array.isArray()</code>： 用于确定传递的值是否是一个 Array。</p></li><li><p><code>Array.of()</code>： 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">Array.of() 和 Array 构造函数之间的区别在于处理整数参数：</p><p><code>Array.of(7)</code>创建一个具有单个元素 7 的数组，而<code>Array(7)</code> 创建一个长度为 7 的空数组</p><p>【注意】这是指一个有 7 个空位(empty)的数组，而不是由 7 个 undefined 组成的数组。</p></div><h2 id="实例成员" tabindex="-1"><a class="header-anchor" href="#实例成员" aria-hidden="true">#</a> 实例成员</h2><ul><li><p><code>fill()</code></p><p>填充数组，将数组中指定区间的所有元素的值，都替换成某个固定的值。</p></li><li><p><code>pop()</code></p><p>删除数组的最后一个元素，并返回这个元素。</p></li><li><p><code>push()</code></p><p>在数组的末尾增加一个或多个元素，并返回数组的新长度(该方法修改原有数组)。</p></li><li><p><code>reverse()</code></p><p>颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。</p></li><li><p><code>shift()</code></p><p>删除数组的第一个元素，并返回这个元素。</p></li><li><p><code>sort()</code></p><p>对数组元素进行排序，并返回当前数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的</p></li><li><p><code>splice()</code></p><p>在任意的位置给数组添加或删除任意个元素。</p><p>通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。</p><p>此方法会改变原数组。</p><p>返回值：由被删除的元素组成的一个数组。</p><p>如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</p></li><li><p><code>unshift()</code></p><p>方法将一个或多个元素添加到数组的开头，并返回该数组的新长度(该方法修改原有数组)。</p></li></ul><h3 id="访问方法" tabindex="-1"><a class="header-anchor" href="#访问方法" aria-hidden="true">#</a> 访问方法</h3><p>下面的这些方法绝对不会改变调用它们的对象的值，只会返回一个新的数组或者返回一个其它的期望值。</p><ul><li><p><code>concat()</code></p><p>方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><blockquote><p>语法：<strong>var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])</strong></p></blockquote></li><li><p><code>includes()</code></p><p>判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。</p><p><strong>注意：使用 includes()比较字符串和字符时是区分大小写。</strong></p><blockquote><p>语法：<strong>arr.includes(valueToFind[, fromIndex])</strong></p></blockquote><p><strong>参数 1：</strong> valueToFind 需要查找的元素值。</p><p><strong>参数 2</strong> fromIndex 可选；从 fromIndex 索引处开始查找 valueToFind。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜 （即使从末尾开始往前跳 fromIndex 的绝对值个索引，然后往后搜寻）。默认为 0。</p></li><li><p><code>join()</code></p><p>方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</p><p><strong>参数：</strong> separator 可选；指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果缺省该值，数组元素用逗号（,）分隔。如果 separator 是空字符串(&quot;&quot;)，则所有元素之间都没有任何字符。 <strong>如果数组中一个元素为 undefined 或 null，它会被转换为空字符串。</strong></p></li><li><p><code>slice()</code></p><p>返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括 end）。原始数组不会被改变。</p><blockquote><p>语法：<strong>arr.slice([begin[, end]])</strong></p></blockquote><p><strong>参数：</strong></p><p>begin 可选；</p><p>提取起始处的索引（从 0 开始），从该索引开始提取原数组元素。 如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。 如果省略 begin，则 slice 从索引 0 开始。 如果 begin 大于原数组的长度，则会返回空数组。</p><p>end 可选；</p><p>提取终止处的索引（从 0 开始），在该索引处结束提取原数组元素。slice 会提取原数组中索引从 begin 到 end 的所有元素（包含 begin，但不包含 end）。 slice(1,4) 会提取原数组中从第二个元素开始一直到第四个元素的所有元素 （索引为 1, 2, 3 的元素）。 如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。 如果 end 被省略，则 slice 会一直提取到原数组末尾。 如果 end 大于数组的长度，slice 也会一直提取到原数组末尾。</p></li><li><p><code>toString()</code> 返回一个字符串，表示指定的数组及其元素。 对于数组对象，toString 方法连接数组并返回一个字符串，其中包含用逗号分隔的每个数组元素。 当一个数组被作为文本值或者进行字符串连接操作时，将会自动调用其 toString 方法。</p></li><li><p><code>indexOf()</code></p><p>返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</p><blockquote><p>语法：<strong>arr.indexOf(searchElement[, fromIndex])</strong></p></blockquote></li><li><p><code>lastIndexOf()</code></p><p>方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。语法同 indexOf</p></li><li><p><code>forEach()</code></p><p>遍历数组，返回值 undefined</p><blockquote><p>语法：<strong>arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</strong></p></blockquote><p><strong>参数 callback</strong> 为数组中每个元素执行的函数，该函数接收一至三个参数：</p><ul><li>currentValue 数组中正在处理的当前元素。</li><li>index 可选，数组中正在处理的当前元素的索引。</li><li>array 可选，forEach() 方法正在操作的数组。</li></ul></li><li><p><code>every()</code></p><p>如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。</p><blockquote><p>语法：<strong>arr.every(callback(element[, index[, array]])[, thisArg])</strong></p></blockquote><p><strong>注意：如果用一个空数组进行测试，在任何情况下它返回的都是 true。</strong></p></li><li><p><code>some()</code></p><p>如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。</p><blockquote><p>语法：<strong>arr.some(callback(element[, index[, array]])[, thisArg])</strong></p></blockquote><p><strong>注意：如果用一个空数组进行测试，在任何情况下它返回的都是 false。</strong></p></li><li><p><code>filter()</code></p><p>过滤，将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。</p></li><li><p><code>find()</code></p><p>找到第一个满足测试函数的元素并返回该元素的值，如果找不到，则返回 undefined。</p></li><li><p><code>findIndex()</code></p><p>找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。</p></li><li><p><code>map()</code></p><p>映射，将数组的每一项映射为另外一项，返回一个由回调函数的返回值组成的新数组。</p></li><li><p><code>reduce()</code></p><p>统计，累计，对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果汇总为单个返回值。</p><blockquote><p>语法：<strong>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</strong></p></blockquote><p><strong>参数</strong></p><p>callback</p><p>执行数组中每个值 (如果没有提供 initialValue 则第一个值除外)的函数，包含四个参数：</p><ul><li>accumulator 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或 initialValue（见于下方）。</li><li>currentValue 数组中正在处理的元素。</li><li>index 可选 数组中正在处理的当前元素的索引。 如果提供了 initialValue，则起始索引号为 0，否则从索引 1 起始。</li><li>array 可选 调用 reduce()的数组</li></ul><p>initialValue 可选 作为第一次调用 callback 函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p></li></ul>',9),n={render:function(e,r){const l=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[p,(0,o._)("p",null,[(0,o._)("a",i,[a,(0,o.Wm)(l)])]),t],64)}}}}]);