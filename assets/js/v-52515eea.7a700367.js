"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[6044],{8023:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-52515eea",path:"/note/js/7.Arithmetic-Operator.html",title:"8. 算数运算符",lang:"zh-CN",frontmatter:{title:"8. 算数运算符",date:"2017-06-13T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"细节",slug:"细节",children:[]},{level:2,title:"其他类型使用算数运算",slug:"其他类型使用算数运算",children:[]}],filePathRelative:"note/js/7.Arithmetic-Operator.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},8558:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});const e=(0,a(6252).uE)('<h1 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h1><p>数学运算符</p><ol><li><p><code>+</code> <code>-</code> <code>*</code> <code>/</code></p></li><li><p><code>+</code> <code>-</code></p></li><li><p><code>%</code> 求余运算</p></li><li><p><code>++</code> <code>--</code> (下节课讨论)</p></li><li><p><code>**</code> 幂运算</p></li></ol><h2 id="细节" tabindex="-1"><a class="header-anchor" href="#细节" aria-hidden="true">#</a> 细节</h2><ol><li>数字运算是不精确的</li><li>除数为 0</li></ol><p>如果 被除数是正数，得到结果 Infinity（正无穷）。</p><p>如果 被除数是负数，得到结果 -Infinity（负无穷）。</p><p>如果 被除数是 0，得到结果 NaN（Not a Number,非数字）。</p><blockquote><p>typeof 函数 返回类型为 <strong>String（字符串）</strong>。</p><p>isNaN 函数，该函数用于判断一个数据是否是 NaN，返回类型为 <strong>Boolean（布尔）</strong>。</p><p>isFinite 函数，该函数用于判断一个数据是否是有限的，返回类型为 <strong>Boolean（布尔）</strong>。</p></blockquote><ol start="3"><li>求余</li></ol><p><code>%</code>，有的教程称之为求模。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n<span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>求的是 被除数 除以 除数 的余数；即 10 ÷ 2 的余数。</p><p>余数的符号，与被除数相同。</p></div><h2 id="其他类型使用算数运算" tabindex="-1"><a class="header-anchor" href="#其他类型使用算数运算" aria-hidden="true">#</a> 其他类型使用算数运算</h2><ol><li>除加号之外的算数运算符</li></ol><p>将原始类型转换为数字类型（自动完成转换），然后进行运算。</p><ul><li>boolean： <ul><li>true -&gt; 1, false -&gt; 0</li></ul></li><li>string: <ul><li>如果字符串内部是一个正确的数字，直接变为数字，如果是一个非数字,则得到 NaN（能识别 Infinity,不能把字符串内部的东西当作表达式,如果字符串是一个空字符串（没有任何内容），转换为 0，字符串转换时会忽略前后空格。</li></ul></li></ul><blockquote><p>NaN 虽然是数字类型，但它和任何数字作任何运算，得到的结果都是 NaN</p></blockquote><ul><li>null: <ul><li>null -&gt; 0</li></ul></li><li>undefined: <ul><li>undefined -&gt; NaN</li></ul></li></ul><p>将对象类型先转为字符串类型，然后再将该字符串转换为数字类型</p><p>对象类型 -&gt; &quot;[object Object]&quot; -&gt; NaN</p><ol start="2"><li>加号运算符</li></ol><ul><li>加号一边有字符串，含义变为 <strong>字符串拼接</strong></li></ul><p>将另一边的其他类型，转换为字符串</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>数字 <span class="token operator">--</span><span class="token operator">&gt;</span> 数字字符串\n\nboolean <span class="token operator">--</span><span class="token operator">&gt;</span> boolean 字符串\n\n<span class="token keyword">null</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;null&quot;</span>\n\n<span class="token keyword">undefined</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;undefined&quot;</span>\n\n对象 <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;[object Object]&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><p>加号两边都没有字符串，但一边有对象，将对象转换为字符串，然后按照上面的规则进行</p></li><li><p>其他情况和上面的数学运算一致</p></li></ul>',26),l={render:function(n,s){return e}}}}]);