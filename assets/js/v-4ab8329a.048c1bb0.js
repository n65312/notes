"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[5294],{8611:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4ab8329a",path:"/note/js/51.Object-method.html",title:"52. 对象的混合与克隆",lang:"zh-CN",frontmatter:{title:"52. 对象的混合与克隆",date:"2017-06-29T00:00:00.000Z",tags:["JS进阶"]},excerpt:"",headers:[{level:2,title:"对象的混合",slug:"对象的混合",children:[{level:3,title:"应用场景",slug:"应用场景",children:[]}]},{level:2,title:"对象克隆",slug:"对象克隆",children:[]}],filePathRelative:"note/js/51.Object-method.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},8901:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(6252);const e=(0,p.uE)('<h1 id="对象的混合与克隆" tabindex="-1"><a class="header-anchor" href="#对象的混合与克隆" aria-hidden="true">#</a> 对象的混合与克隆</h1><h2 id="对象的混合" tabindex="-1"><a class="header-anchor" href="#对象的混合" aria-hidden="true">#</a> 对象的混合</h2><p>两个对象，混合后产生一个新对象。</p><p>自定义实现：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  z<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span>\n  z<span class="token operator">:</span> <span class="token string">&#39;bcd&#39;</span><span class="token punctuation">,</span>\n  h<span class="token operator">:</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * 混合对象，将对象 obj2 混合到 obj1，返回一个新对象。\n * 不会改变原对象\n */</span>\n<span class="token keyword">function</span> <span class="token function">myMixin</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// 复制 obj2的属性</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    newObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj2<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 找到 obj1中有 但是obj2中没有的属性</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>prop <span class="token keyword">in</span> obj2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj1<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newObj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">myMixin</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> obj1<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span> <span class="token comment">// {x: &quot;abc&quot;, y: 3, z: &quot;bcd&quot;, h: &quot;aaa&quot;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>',5),t=(0,p.Uk)("使用 "),o=(0,p._)("code",null,"Object.assign()",-1),c=(0,p.Uk)(),l={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("MDN"),r=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  z<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span>\n  z<span class="token operator">:</span> <span class="token string">&#39;bcd&#39;</span><span class="token punctuation">,</span>\n  h<span class="token operator">:</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * 混合对象，将对象 obj2 混合到 obj1，返回一个新对象。\n * 不会改变原对象\n */</span>\n<span class="token keyword">function</span> <span class="token function">mixin</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">mixin</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> obj1<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span> <span class="token comment">// {x: &quot;abc&quot;, y: 3, z: &quot;bcd&quot;, h: &quot;aaa&quot;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// option 参数是一个对象，表示配置对象</span>\n<span class="token keyword">function</span> <span class="token function">complicate</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果没有传递，则使用默认值</span>\n  <span class="token keyword">var</span> defaultOprion <span class="token operator">=</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token string">&#39;default-a&#39;</span><span class="token punctuation">,</span>\n    b<span class="token operator">:</span> <span class="token string">&#39;default-b&#39;</span><span class="token punctuation">,</span>\n    c<span class="token operator">:</span> <span class="token string">&#39;default-c&#39;</span><span class="token punctuation">,</span>\n    d<span class="token operator">:</span> <span class="token string">&#39;default-d&#39;</span><span class="token punctuation">,</span>\n    e<span class="token operator">:</span> <span class="token string">&#39;default-e&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> opt <span class="token operator">=</span> myPlugin<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>defaultOprion<span class="token punctuation">,</span> option<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> opt\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 没有传递参数对象</span>\n<span class="token function">complicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">//{a: &quot;default-a&quot;, b: &quot;default-b&quot;, c: &quot;default-c&quot;, d: &quot;default-d&quot;, e: &quot;default-e&quot;}</span>\n\n<span class="token comment">// 传递了参数对象</span>\n<span class="token function">complicate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;AAA&#39;</span><span class="token punctuation">,</span>\n  b<span class="token operator">:</span> <span class="token string">&#39;BBB&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// {a: &quot;AAA&quot;, b: &quot;BBB&quot;, c: &quot;default-c&quot;, d: &quot;default-d&quot;, e: &quot;default-e&quot;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="对象克隆" tabindex="-1"><a class="header-anchor" href="#对象克隆" aria-hidden="true">#</a> 对象克隆</h2><p>把原来对象的属性遍历一遍，赋给一个新的对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 克隆一个对象\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">obj</span> 要克隆的数据变量\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span> <span class="token parameter">deep</span> 是否深度克隆\n */</span>\n<span class="token keyword">function</span> <span class="token function">objClone</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> deep</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 判断是不是数组</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 深度克隆</span>\n      <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> newArr\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 复制数组</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token comment">// 判断是不是对象</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 深度克隆</span>\n        newObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> deep<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        newObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> newObj\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 函数、原始类型</span>\n    <span class="token keyword">return</span> obj <span class="token comment">// 递归的终止条件</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  subObj<span class="token operator">:</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token function">objClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n\nobj <span class="token operator">===</span> newObj <span class="token comment">// false</span>\nnewObj <span class="token comment">// {x: 1, y: 2, subObj: {a: 1, b: 2} }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div>',6),i={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,o,c,(0,p._)("a",l,[u,(0,p.Wm)(a)])]),r],64)}}}}]);