"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[6068],{2904:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-42420ebe",path:"/note/js/16.switch.html",title:"17. switch",lang:"zh-CN",frontmatter:{title:"17. switch",date:"2017-06-14T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[],filePathRelative:"note/js/16.switch.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},6435:(s,n,a)=>{a.r(n),a.d(n,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h1><p>switch始终可以使用if 结构代替</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">case</span> 数据<span class="token number">1</span><span class="token operator">:</span>\n  代码块\n  <span class="token keyword">case</span> 数据<span class="token number">2</span><span class="token operator">:</span>\n  代码块\n  <span class="token comment">// ...</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n  代码块\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol><li>计算表达式的返回值，依次和case后面的数据进行严格相等比较，如果某个case相等，停止比较，然后运行其内部的代码块，再然后，依次运行之后的所有代码块。</li><li>在case分支内部，使用break语句，可以立即停止switch结构。</li><li>default表示前面的所有case都不匹配时运行，可以省略。</li></ol>',4),t={render:function(s,n){return e}}}}]);