"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[991],{9419:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-183b6941",path:"/note/js/31.Error-handling.html",title:"32. 错误处理",lang:"zh-CN",frontmatter:{title:"32. 错误处理",date:"2017-06-20T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"调试错误",slug:"调试错误",children:[]},{level:2,title:"抛出错误",slug:"抛出错误",children:[]},{level:2,title:"捕获错误",slug:"捕获错误",children:[]}],filePathRelative:"note/js/31.Error-handling.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},9501:(n,a,s)=>{s.r(a),s.d(a,{default:()=>l});const e=(0,s(6252).uE)('<h1 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h1><p>JS中的错误分为：</p><ol><li>语法错误 (Uncaught SyntaxError:)</li></ol><p>会导致当前整个脚本块无法执行</p><ol start="2"><li>运行错误 (test1.html:11 Uncaught ReferenceError:)</li></ol><ul><li>运行报错：会导致当前脚本块后续代码无法执行</li><li>运行结果不符合预期</li></ul><h2 id="调试错误" tabindex="-1"><a class="header-anchor" href="#调试错误" aria-hidden="true">#</a> 调试错误</h2><ol><li><p>控制台打印</p></li><li><p>断点调试</p></li></ol><h2 id="抛出错误" tabindex="-1"><a class="header-anchor" href="#抛出错误" aria-hidden="true">#</a> 抛出错误</h2><p>错误在JS中本质是一个对象，抛出错误的语法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">throw</span> 错误对象\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>错误对象的构造函数为Error</p><h2 id="捕获错误" tabindex="-1"><a class="header-anchor" href="#捕获错误" aria-hidden="true">#</a> 捕获错误</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>\n  <span class="token comment">// 代码块1</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">catch</span><span class="token punctuation">(</span>错误对象<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 代码块2</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">finally</span><span class="token punctuation">{</span>\n  <span class="token comment">// 代码块3</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 当运行代码1 时，如果出现错误，立即停止 代码块1</span>\n\n<span class="token comment">// 转而执行 代码块2</span>\n\n<span class="token comment">// 错误对象为抛出的错误对象</span>\n\n<span class="token comment">// 无论 代码块1 和 代码块2 是否执行，最终都会执行 代码块3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',14),l={render:function(n,a){return e}}}}]);