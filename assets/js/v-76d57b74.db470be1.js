"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[4804],{8589:(e,l,i)=>{i.r(l),i.d(l,{data:()=>o});const o={key:"v-76d57b74",path:"/note/js/29.Date.html",title:"30. Date 构造器",lang:"zh-CN",frontmatter:{title:"30. Date 构造器",date:"2017-06-19T00:00:00.000Z",tags:["JS"]},excerpt:"",headers:[{level:2,title:"术语",slug:"术语",children:[]},{level:2,title:"创建时间对象",slug:"创建时间对象",children:[]},{level:2,title:"实例成员",slug:"实例成员",children:[]},{level:2,title:"日期的运算",slug:"日期的运算",children:[]}],filePathRelative:"note/js/29.Date.md",git:{updatedTime:1628577068e3,contributors:[{name:"n",email:"n@nannandeMacBook-Air.local",commits:1}]}}},6171:(e,l,i)=>{i.r(l),i.d(l,{default:()=>p});var o=i(6252);const t=(0,o._)("h1",{id:"date-构造器",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#date-构造器","aria-hidden":"true"},"#"),(0,o.Uk)(" Date 构造器")],-1),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date",target:"_blank",rel:"noopener noreferrer"},a=(0,o.Uk)("MDN"),c=(0,o.uE)('<h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><ol><li>时间单位</li></ol><p>年（year） 月（month） 日（date） 时（hour） 分（minute） 秒（second）= 1000ms 毫秒（millisecond，ms）= 1000 μs 微秒（microsecond，μs）= 1000 ns 纳秒（nanosecond，ns）</p><ol start="2"><li>UTC 和 GMT</li></ol><p>UTC：Coordinated Universal Time 协调世界时。以原子时秒长为基础，精确到纳秒。 GMT：Greenwich Mean Time 格林威治时间。太阳时，精确到毫秒。</p><p>UTC 和 GMT 误差不超过 0.9 秒</p><p>GMT +0800 表示东 8 区</p><ol start="3"><li>时间戳</li></ol><p>数字</p><p>1970-1-1 凌晨 到某个时间 所经过的毫秒数</p><h2 id="创建时间对象" tabindex="-1"><a class="header-anchor" href="#创建时间对象" aria-hidden="true">#</a> 创建时间对象</h2><ul><li><p>直接调用函数 <code>Date()</code>（不使用 new），忽略所有参数，直接返回当前时间的字符串。</p></li><li><p><code>new Date()</code> 创建日期对象</p><ol><li>无参，当前时间</li><li>1 个参数，参数为数字，表示传入的是时间戳（单位毫秒），正数表示1970-1-1 以后，负数表示以前。</li><li>2 个参数以上，分别表示：年、月、日、时、分、秒、毫秒</li></ol><blockquote><p>注意：月份从 0 开始计算 如果缺失参数，日期部分默认为 1，时分秒默认为 0。</p><p>月、日、时、分、秒、毫秒，均可传递负数，如果传递负数，会根据指定日期进行计算。</p></blockquote></li></ul><h2 id="实例成员" tabindex="-1"><a class="header-anchor" href="#实例成员" aria-hidden="true">#</a> 实例成员</h2><ul><li><p><code>getDate()</code> 返回指定日期对象的月份中的第几天（1-31）。</p></li><li><p><code>getDay()</code> 返回指定日期对象的星期中的第几天（0-6）。0 表示星期天</p></li><li><p><code>getFullYear()</code> 返回指定日期对象的年份（四位数年份时返回四位数字）。</p></li><li><p><code>getMonth()</code> 返回指定日期的月份（0-11）</p></li><li><p><code>getHours()</code> 返回指定日期对象的小时（0-23）。</p></li><li><p><code>getMinutes()</code> 返回指定对象的分钟（0-59）。</p></li><li><p><code>getSeconds()</code> 返回指定日期对象的秒数（0-59）。</p></li><li><p><code>getMilliseconds()</code> 返回指定日期对象的毫秒（0-999）。</p></li><li><p><code>getTime()</code> 返回时间戳，即从1970-1-1 00:00:00 UTC（协调世界时）到该日期经过的毫秒数，对于1970-1-1 00:00:00 UTC之前的时间返回负值。</p></li><li><p><code>setDate()</code> 设置日期，为指定的日期对象设置月份中的第几天。</p></li><li><p><code>setFullYear()</code> 设置年份</p></li><li><p><code>setMonth()</code> 设置月份，从0开始计算。</p></li><li><p><code>setHours()</code> 设置小时</p></li><li><p><code>setMinutes()</code> 设置分钟</p></li><li><p><code>setSeconds()</code> 设置秒</p></li><li><p><code>setmillisecond()</code> 设置毫秒</p></li><li><p><code>setTime()</code> 设置时间戳，通过指定从 1970-1-1 00:00:00 UTC 开始经过的毫秒数来设置日期对象的时间，对于早于 1970-1-1 00:00:00 UTC的时间可使用负值。</p></li><li><p><code>toDateString()</code> 将指定日期对象的日期部分转换为可读字符串。</p></li><li><p><code>toISOString()</code> 把一个日期转换为符合 ISO 8601 扩展格式的字符串。</p></li><li><p><code>toLocaleDateString()</code> 根据当前系统的地区设置，将日期部分转换为可读字符串。</p></li><li><p><code>toLocaleString()</code> 根据当前系统的地区设置，将整个日期对象转为可读字符串。</p></li><li><p><code>toLocaleTimeString()</code> 根据当前系统的地区设置，将时间部分转为可读字符串。</p></li><li><p><code>valueOf()</code> 返回时间戳。得到日期对象的原始值，即从1970年1月1日0时0分0秒（UTC，即协调世界时）到该日期的毫秒数。</p></li></ul><h2 id="日期的运算" tabindex="-1"><a class="header-anchor" href="#日期的运算" aria-hidden="true">#</a> 日期的运算</h2><p>日期对象重写了<strong>Object</strong>中的<code>valueOf</code>方法，返回的是一个数字，表示时间戳</p>',16),p={render:function(e,l){const i=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[t,(0,o._)("p",null,[(0,o._)("a",d,[a,(0,o.Wm)(i)])]),c],64)}}}}]);